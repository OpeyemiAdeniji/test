name: Update Port with YouTube Playlist Data

on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  initialize:
    runs-on: ubuntu-latest
    outputs:
      access_token: ${{ steps.get_token.outputs.token }}
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
    
    steps:
      - name: Get Port access token
        id: get_token
        run: |
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }')
          
          token=$(echo "$response" | jq -r '.accessToken')
          if [ -z "$token" ]; then
            echo "Failed to get access token"
            exit 1
          fi
          echo "token=$token" >> $GITHUB_OUTPUT

      - name: Log initialization start
        run: |
          curl -X POST "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.token }}" \
            -H "Content-Type: application/json" \
            -d '{"message": "Starting YouTube playlist ingestion"}'

  process_playlist:
    needs: initialize
    runs-on: ubuntu-latest
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      PORT_TOKEN: ${{ needs.initialize.outputs.access_token }}
    
    steps:
      - name: Log playlist processing start
        run: |
          curl -X POST "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Authorization: Bearer $PORT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"message": "Fetching playlist details"}'

      - name: Fetch playlist details
        id: playlist_details
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${{ inputs.playlistid }}&key=$YOUTUBE_API_KEY")
          
          # Check if the API request was successful
          if [ "$(echo "$playlist_response" | jq -r '.items | length')" -eq 0 ]; then
            echo "Failed to fetch playlist details"
            exit 1
          fi
          
          # Create and store playlist details
          echo "PLAYLIST_ID=$(echo $playlist_response | jq -r '.items[0].id')" >> $GITHUB_ENV
          echo "PLAYLIST_TITLE=$(echo $playlist_response | jq -r '.items[0].snippet.title')" >> $GITHUB_ENV
          echo "VIDEO_COUNT=$(echo $playlist_response | jq -r '.items[0].contentDetails.itemCount')" >> $GITHUB_ENV

      - name: Create playlist entity in Port
        run: |
          playlist_entity=$(jq -n \
            --arg id "$PLAYLIST_ID" \
            --arg title "$PLAYLIST_TITLE" \
            --arg count "$VIDEO_COUNT" \
            '{
              identifier: $id,
              title: $title,
              properties: {
                playlistId: $id,
                title: $title,
                videoCount: ($count | tonumber)
              }
            }')

          response=$(curl -s -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: Bearer $PORT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$playlist_entity")

          if [ "$(echo "$response" | jq -r '.ok // false')" != "true" ]; then
            echo "Failed to create playlist entity: $(echo "$response" | jq -r '.message // "Unknown error"')"
            exit 1
          fi

  process_videos:
    needs: [initialize, process_playlist]
    runs-on: ubuntu-latest
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      PORT_TOKEN: ${{ needs.initialize.outputs.access_token }}
    
    steps:
      - name: Log video processing start
        run: |
          curl -X POST "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Authorization: Bearer $PORT_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"message": "Starting video processing"}'

      - name: Process videos
        run: |
          next_page_token=""
          processed_count=0
          
          while :; do
            url="https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${{ inputs.playlistid }}&key=$YOUTUBE_API_KEY${next_page_token:+&pageToken=$next_page_token}"
            response=$(curl -s "$url")
            
            # Check if the API request was successful
            if [ "$(echo "$response" | jq -r '.items | length')" -eq 0 ]; then
              echo "No more videos to process or API error"
              break
            }
            
            # Process each video
            echo "$response" | jq -r '.items[].snippet.resourceId.videoId' | while read -r video_id; do
              video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=$YOUTUBE_API_KEY")
              
              # Create video entity
              video_entity=$(echo "$video_details" | jq -r --arg playlist_id "${{ inputs.playlistid }}" '.items[0] | {
                identifier: .id,
                title: .snippet.title,
                properties: {
                  videoId: .id,
                  title: .snippet.title,
                  duration: .contentDetails.duration,
                  viewCount: (.statistics.viewCount | tonumber),
                  likeCount: (.statistics.likeCount | tonumber)
                },
                relations: {
                  belongs_to_playlist: $playlist_id
                }
              }')

              # Upload to Port
              upload_response=$(curl -s -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
                -H "Authorization: Bearer $PORT_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$video_entity")

              if [ "$(echo "$upload_response" | jq -r '.ok // false')" != "true" ]; then
                echo "Failed to create video entity: $(echo "$upload_response" | jq -r '.message // "Unknown error"')"
                continue
              fi

              ((processed_count++))
              
              # Report progress every 10 videos
              if ((processed_count % 10 == 0)); then
                curl -X POST "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
                  -H "Authorization: Bearer $PORT_TOKEN" \
                  -H "Content-Type: application/json" \
                  -d "{\"message\": \"Processed $processed_count videos\"}"
              fi
            done

            next_page_token=$(echo "$response" | jq -r '.nextPageToken // empty')
            [ -z "$next_page_token" ] && break
          done

          # Final progress report
          curl -X POST "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Authorization: Bearer $PORT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"message\": \"Completed processing $processed_count videos\"}"

  finalize:
    needs: [initialize, process_playlist, process_videos]
    runs-on: ubuntu-latest
    if: always()
    env:
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      PORT_TOKEN: ${{ needs.initialize.outputs.access_token }}
    
    steps:
      - name: Report final status
        run: |
          status="${{ needs.process_playlist.result == 'success' && needs.process_videos.result == 'success' && 'SUCCESS' || 'FAILURE' }}"
          
          curl -X PATCH "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID" \
            -H "Authorization: Bearer $PORT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
              \"status\": \"$status\",
              \"message\": \"YouTube playlist ingestion complete with status: $status\"
            }"
