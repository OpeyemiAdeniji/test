name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  setup_environment:
    # Previous setup job remains the same...
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq for JSON processing
        run: sudo apt-get install jq

      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)

          # Function to get Port access token
          get_port_access_token() {
            response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
              -H "Content-Type: application/json" \
              -d '{
                "clientId": "'"$PORT_CLIENT_ID"'",
                "clientSecret": "'"$PORT_CLIENT_SECRET"'"
              }')

            if echo "$response" | grep -q '"ok":false'; then
              echo "Error obtaining access token: $(echo "$response" | jq -r '.error')"
              return 1
            fi

            access_token=$(echo "$response" | jq -r '.accessToken // empty')
            if [ -z "$access_token" ]; then
              echo "Failed to retrieve access token. Response: $response"
              return 1
            fi

            echo "$access_token"
          }

          ACCESS_TOKEN=$(get_port_access_token)
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to obtain access token. Exiting."
            exit 1
          fi

          if ! [[ "$ACCESS_TOKEN" =~ ^[a-zA-Z0-9_-]+\.[a-zA-Z0-9_-]+\.[a-zA-Z0-9_-]+$ ]]; then
            echo "Invalid JWT format detected. Please check the token generation."
            exit 1
          fi

  fetch_videos:
    runs-on: ubuntu-latest
    needs: [push_playlist_to_port, fetch_playlist_metadata]
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      videos_array: ${{ steps.process_videos.outputs.videos_array }}
    steps:
      - name: Generate Access Token
        id: token
        run: |
          ACCESS_TOKEN=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }' | jq -r '.accessToken')
          
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Fetch and Process Videos
        id: process_videos
        run: |
          # Initialize videos array
          videos_array="["
          separator=""
          next_page_token=""
          video_count=0
          
          echo "Starting to fetch videos from playlist ${PLAYLIST_ID}..."
          
          while true; do
            # Fetch playlist items
            playlist_items_url="https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}${next_page_token:+&pageToken=$next_page_token}"
            echo "Fetching playlist items page..."
            
            playlist_response=$(curl -s "$playlist_items_url")
            
            # Check for API errors
            if echo "$playlist_response" | jq -e '.error' > /dev/null; then
              echo "Error fetching playlist items: $(echo "$playlist_response" | jq -r '.error.message')"
              exit 1
            fi
            
            # Process each video in the current page
            while read -r video_id; do
              [ -z "$video_id" ] && continue
              
              echo "Processing video ID: $video_id"
              
              # Fetch video details
              video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=${YOUTUBE_API_KEY}")
              
              # Check for API errors
              if echo "$video_details" | jq -e '.error' > /dev/null; then
                echo "Error fetching video details: $(echo "$video_details" | jq -r '.error.message')"
                continue
              fi
              
              # Verify video data exists
              if [ "$(echo "$video_details" | jq '.items | length')" -eq 0 ]; then
                echo "No data found for video ID: $video_id"
                continue
              }
              
              # Create video entity
              video_json=$(echo $video_details | jq -c '.items[0] | {
                identifier: .id,
                title: .snippet.title,
                properties: {
                  videoId: .id,
                  title: .snippet.title,
                  description: .snippet.description,
                  thumbnailUrl: .snippet.thumbnails.default.url,
                  duration: .contentDetails.duration,
                  viewCount: (.statistics.viewCount // "0" | tonumber),
                  likeCount: (.statistics.likeCount // "0" | tonumber),
                  commentCount: (.statistics.commentCount // "0" | tonumber)
                },
                relations: {
                  belongs_to_playlist: "'"${{ needs.fetch_playlist_metadata.outputs.PLAYLIST_ID }}"'"
                }
              }')
              
              videos_array="${videos_array}${separator}${video_json}"
              separator=","
              video_count=$((video_count + 1))
              echo "Processed video $video_count: $(echo "$video_json" | jq -r '.title')"
              
            done < <(echo "$playlist_response" | jq -r '.items[].snippet.resourceId.videoId')
            
            # Check for next page
            next_page_token=$(echo $playlist_response | jq -r '.nextPageToken // empty')
            [ -z "$next_page_token" ] && break
            
            echo "Moving to next page..."
          done
          
          # Close the array
          videos_array="${videos_array}]"
          
          echo "Total videos processed: $video_count"
          
          # Validate final JSON structure
          if ! echo "$videos_array" | jq empty; then
            echo "Error: Invalid JSON structure in videos array"
            exit 1
          fi
          
          # Save the videos array as output
          echo "videos_array=$(echo $videos_array | jq -R -s .)" >> $GITHUB_OUTPUT

  push_videos_to_port:
    runs-on: ubuntu-latest
    needs: fetch_videos
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Generate Access Token
        run: |
          ACCESS_TOKEN=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }' | jq -r '.accessToken')
          
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Push Videos to Port
        run: |
          # Get videos array from previous job
          videos_data=$(echo '${{ needs.fetch_videos.outputs.videos_array }}' | jq -r .)
          
          # Validate videos data
          if [ "$(echo "$videos_data" | jq 'length')" -eq 0 ]; then
            echo "Error: No videos found in the data"
            exit 1
          fi
          
          echo "Starting to push videos to Port..."
          success_count=0
          failed_count=0
          
          # Process each video
          while read -r video; do
            video_id=$(echo "$video" | jq -r '.identifier')
            echo "Pushing video ID: $video_id"
            
            # Push to Port
            response=$(curl -s -w "\n%{http_code}" -X POST \
              "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$video")
            
            # Split response into body and status code
            body=$(echo "$response" | head -n 1)
            status_code=$(echo "$response" | tail -n 1)
            
            if [ "$status_code" -eq 200 ] || [ "$status_code" -eq 201 ]; then
              echo "Successfully pushed video: $video_id"
              success_count=$((success_count + 1))
            else
              echo "Failed to push video $video_id. Status code: $status_code"
              echo "Error response: $body"
              failed_count=$((failed_count + 1))
            fi
            
            # Add small delay to prevent rate limiting
            sleep 1
          done < <(echo "$videos_data" | jq -c '.[]')
          
          echo "Push complete. Successfully pushed: $success_count videos. Failed: $failed_count videos."
          
          if [ $failed_count -gt 0 ]; then
            echo "Warning: Some videos failed to push to Port"
            exit 1
          fi
