name: Update Port with YouTube Playlist Data

on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  initialize:
    runs-on: ubuntu-latest
    outputs:
      access_token: ${{ steps.get_token.outputs.access_token }}
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
    
    steps:
      - name: Get Port access token
        id: get_token
        run: |
          token_response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }')
          
          access_token=$(echo "$token_response" | jq -r '.accessToken')
          if [ -z "$access_token" ] || [ "$access_token" = "null" ]; then
            echo "Failed to get access token"
            exit 1
          fi
          echo "access_token=$access_token" >> $GITHUB_OUTPUT

      - name: Verify token works
        run: |
          test_response=$(curl -s -X GET "https://api.getport.io/v1/blueprints" \
            -H "Authorization: Bearer ${{ steps.get_token.outputs.access_token }}")
          
          if [ "$(echo "$test_response" | jq -r '.ok // false')" != "true" ]; then
            echo "Token verification failed"
            exit 1
          fi

  process_playlist:
    needs: initialize
    runs-on: ubuntu-latest
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      ACCESS_TOKEN: ${{ needs.initialize.outputs.access_token }}
    
    steps:
      - name: Fetch playlist details
        id: playlist_details
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails&id=${{ inputs.playlistid }}&key=$YOUTUBE_API_KEY")
          
          if [ "$(echo "$playlist_response" | jq -r '.items | length')" -eq 0 ]; then
            echo "Failed to fetch playlist details"
            exit 1
          fi
          
          echo "playlist_id=$(echo "$playlist_response" | jq -r '.items[0].id')" >> $GITHUB_OUTPUT
          echo "playlist_title=$(echo "$playlist_response" | jq -r '.items[0].snippet.title')" >> $GITHUB_OUTPUT
          echo "video_count=$(echo "$playlist_response" | jq -r '.items[0].contentDetails.itemCount')" >> $GITHUB_OUTPUT

      - name: Create playlist entity
        run: |
          playlist_data=$(jq -n \
            --arg id "${{ steps.playlist_details.outputs.playlist_id }}" \
            --arg title "${{ steps.playlist_details.outputs.playlist_title }}" \
            --arg count "${{ steps.playlist_details.outputs.video_count }}" \
            '{
              identifier: $id,
              title: $title,
              properties: {
                playlistId: $id,
                title: $title,
                videoCount: ($count | tonumber)
              }
            }')

          response=$(curl -s -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$playlist_data")

          if echo "$response" | jq -e '.error' > /dev/null; then
            echo "Failed to create playlist entity: $(echo "$response" | jq -r '.message')"
            exit 1
          fi

  process_videos:
    needs: [initialize, process_playlist]
    runs-on: ubuntu-latest
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      ACCESS_TOKEN: ${{ needs.initialize.outputs.access_token }}
    
    steps:
      - name: Process playlist videos
        run: |
          next_page_token=""
          processed_count=0
          
          while true; do
            # Fetch playlist items
            url="https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${{ inputs.playlistid }}&key=$YOUTUBE_API_KEY${next_page_token:+&pageToken=$next_page_token}"
            playlist_items=$(curl -s "$url")
            
            # Process each video
            echo "$playlist_items" | jq -c '.items[]' | while read -r item; do
              video_id=$(echo "$item" | jq -r '.snippet.resourceId.videoId')
              
              # Get video details
              video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=$YOUTUBE_API_KEY")
              
              # Create video entity
              video_data=$(echo "$video_details" | jq -r --arg playlist_id "${{ inputs.playlistid }}" '.items[0] | {
                identifier: .id,
                title: .snippet.title,
                properties: {
                  videoId: .id,
                  title: .snippet.title,
                  duration: .contentDetails.duration,
                  viewCount: (.statistics.viewCount | tonumber),
                  likeCount: (.statistics.likeCount | tonumber)
                },
                relations: {
                  belongs_to_playlist: $playlist_id
                }
              }')

              # Upload to Port
              curl -s -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$video_data"

              ((processed_count++))
              
              # Log progress
              if ((processed_count % 10 == 0)); then
                echo "Processed $processed_count videos"
              fi
            done
            
            # Check for more pages
            next_page_token=$(echo "$playlist_items" | jq -r '.nextPageToken // empty')
            [ -z "$next_page_token" ] && break
          done
          
          echo "Total videos processed: $processed_count"

  finalize:
    needs: [initialize, process_playlist, process_videos]
    runs-on: ubuntu-latest
    if: always()
    env:
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      ACCESS_TOKEN: ${{ needs.initialize.outputs.access_token }}
    
    steps:
      - name: Set final status
        run: |
          status="${{ needs.process_playlist.result == 'success' && needs.process_videos.result == 'success' && 'SUCCESS' || 'FAILURE' }}"
          
          curl -X PATCH "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
              \"status\": \"$status\",
              \"message\": \"YouTube playlist integration completed with status: $status\"
            }"
