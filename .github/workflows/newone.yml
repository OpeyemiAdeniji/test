name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  update_port:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Create Python script
        run: |
          cat << 'EOF' > fetch_youtube.py
          import os
          import requests
          import json
          from datetime import datetime

          # Constants and setup
          YOUTUBE_API_KEY = os.environ['YOUTUBE_API_KEY']
          playlist_id = os.environ['PLAYLIST_ID']
          PORT_CLIENT_ID = os.environ['PORT_CLIENT_ID']
          PORT_CLIENT_SECRET = os.environ['PORT_CLIENT_SECRET']
          API_URL = 'https://api.getport.io/v1'

          print(playlist_id)
          print()
          
          credentials = {
              'clientId': PORT_CLIENT_ID,
              'clientSecret': PORT_CLIENT_SECRET
                }

          def fetch_playlist_details(playlist_id):
              url = f'https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id={playlist_id}&key={YOUTUBE_API_KEY}'
              response = requests.get(url)
              response.raise_for_status()
              return response.json()['items'][0]

          def fetch_video_details(video_id):
              url = f'https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id={video_id}&key={YOUTUBE_API_KEY}'
              response = requests.get(url)
              response.raise_for_status()
              return response.json()['items'][0]

          def fetch_playlist_videos(playlist_id):
              videos = []
              url = f'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId={playlist_id}&key={YOUTUBE_API_KEY}'
              while url:
                  response = requests.get(url)
                  response.raise_for_status()
                  data = response.json()
                  for item in data.get('items', []):
                      video_id = item['snippet']['resourceId']['videoId']
                      video_details = fetch_video_details(video_id)
                      videos.append(video_details)
                  next_page_token = data.get('nextPageToken')
                  if next_page_token:
                      url = f'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&pageToken={next_page_token}&playlistId={playlist_id}&key={YOUTUBE_API_KEY}'
                  else:
                      url = None
              return videos

          def sanitize_value(value):
              if isinstance(value, str):
                  return value.replace('\n', ' ').replace('\r', ' ').replace('"', '\\"').strip()
              return value

          # Get Port access token

          token_response = requests.post(f'{API_URL}/auth/access_token', json=credentials)
          access_token = token_response.json()['accessToken']

          headers = {
                'Authorization': f'Bearer {access_token}'
            }

          # Fetch playlist details
          playlist = fetch_playlist_details(playlist_id)

          # Create playlist in Port
          playlist_entity = {
              'identifier': playlist['id'],
              'title': sanitize_value(playlist['snippet']['title']),
              'properties': {
                  'playlistId': playlist['id'],
                  'title': sanitize_value(playlist['snippet']['title']),
                  'description': sanitize_value(playlist['snippet']['description']),
                  'thumbnailUrl': playlist['snippet']['thumbnails']['default']['url'],
                  'videoCount': playlist['contentDetails']['itemCount'],
                  'created_at': playlist['snippet']['publishedAt']
              }
          }

          playlist_response = requests.post(f'{API_URL}/blueprints/playlist/entities?upsert=true',json=playlist_entity,headers=headers)
          print(f"Playlist sync status: {playlist_response.status_code}")

          # Fetch and upload videos
          videos = fetch_playlist_videos(playlist_id)
          
          for video in videos:
              snippet = video['snippet']
              statistics = video.get('statistics', {})
              content_details = video.get('contentDetails', {})
              
              video_entity = {
                  'identifier': video['id'],
                  'title': sanitize_value(snippet['title']),
                  'properties': {
                      'videoId': video['id'],
                      'title': sanitize_value(snippet['title']),
                      'description': sanitize_value(snippet['description']),
                      'thumbnailUrl': snippet['thumbnails']['default']['url'],
                      'duration': content_details.get('duration', ''),
                      'viewCount': int(statistics.get('viewCount', 0)),
                      'likeCount': int(statistics.get('likeCount', 0)),
                      'commentCount': int(statistics.get('commentCount', 0))
                  },
                  'relations': {
                      'belongs_to_playlist': playlist['id']
                  }
              }
              
              video_response = requests.post(f'{API_URL}/blueprints/video/entities?upsert=true',json=video_entity,headers=headers)
              print(f"Playlist sync status: {video_response.status_code}")

          EOF

      - name: Fetch and Process YouTube Data
        id: fetch_data
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ inputs.playlistid }}
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
        run: python fetch_youtube.py
