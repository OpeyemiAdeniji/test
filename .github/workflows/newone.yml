import os
import requests
import json
from datetime import datetime

# Constants
YOUTUBE_API_KEY = os.environ['YOUTUBE_API_KEY']
playlist_id = os.environ['PLAYLIST_ID']

def fetch_playlist_details(playlist_id):
    url = f'https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id={playlist_id}&key={YOUTUBE_API_KEY}'
    response = requests.get(url)
    response.raise_for_status()
    return response.json()['items'][0]

def fetch_video_details(video_id):
    url = f'https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id={video_id}&key={YOUTUBE_API_KEY}'
    response = requests.get(url)
    response.raise_for_status()
    return response.json()['items'][0]

def fetch_playlist_videos(playlist_id):
    videos = []
    url = f'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId={playlist_id}&key={YOUTUBE_API_KEY}'
    while url:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        for item in data.get('items', []):
            video_id = item['snippet']['resourceId']['videoId']
            video_details = fetch_video_details(video_id)
            videos.append(video_details)
        next_page_token = data.get('nextPageToken')
        if next_page_token:
            url = f'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&pageToken={next_page_token}&playlistId={playlist_id}&key={YOUTUBE_API_KEY}'
        else:
            url = None
    return videos

def sanitize_value(value):
    if isinstance(value, str):
        # Replace newlines with spaces and escape special characters
        return value.replace('\n', ' ').replace('\r', ' ').replace('"', '\\"').strip()
    return value

# Fetch playlist details
playlist = fetch_playlist_details(playlist_id)
playlist_data = {
    "playlistId": playlist['id'],
    "title": sanitize_value(playlist['snippet']['title']),
    "description": sanitize_value(playlist['snippet']['description']),
    "thumbnailUrl": playlist['snippet']['thumbnails']['default']['url'],
    "videoCount": playlist['contentDetails']['itemCount'],
    "created_at": playlist['snippet']['publishedAt']
}

# Write playlist data to GITHUB_OUTPUT using the new multiline syntax
with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
    for key, value in playlist_data.items():
        if isinstance(value, str):
            print(f"playlist_{key}<<EOF", file=fh)
            print(f"{value}", file=fh)
            print("EOF", file=fh)
        else:
            print(f"playlist_{key}={value}", file=fh)

# Fetch videos
videos = fetch_playlist_videos(playlist_id)

# Write video data to GITHUB_OUTPUT
with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
    for i, video in enumerate(videos):
        snippet = video['snippet']
        statistics = video.get('statistics', {})
        content_details = video.get('contentDetails', {})
        
        video_data = {
            "videoId": video['id'],
            "title": sanitize_value(snippet['title']),
            "description": sanitize_value(snippet['description']),
            "thumbnailUrl": snippet['thumbnails']['default']['url'],
            "duration": content_details.get('duration', ''),
            "viewCount": int(statistics.get('viewCount', 0)),
            "likeCount": int(statistics.get('likeCount', 0)),
            "commentCount": int(statistics.get('commentCount', 0))
        }
        
        for key, value in video_data.items():
            if isinstance(value, str):
                print(f"{key}_{i}<<EOF", file=fh)
                print(f"{value}", file=fh)
                print("EOF", file=fh)
            else:
                print(f"{key}_{i}={value}", file=fh)
    
    print(f"video_count={len(videos)}", file=fh)
