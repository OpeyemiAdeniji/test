name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq for JSON processing
        run: sudo apt-get install jq

  fetch_port_token:
    runs-on: ubuntu-latest
    needs: setup_environment
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Fetch Port Access Token
        id: get_token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)

          get_port_access_token() {
            response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
              -H "Content-Type: application/json" \
              -d '{
                "clientId": "'"$PORT_CLIENT_ID"'",
                "clientSecret": "'"$PORT_CLIENT_SECRET"'"
              }')

            if echo "$response" | grep -q '"ok":false'; then
              echo "Error obtaining access token: $(echo "$response" | jq -r '.error')"
              exit 1
            fi

            access_token=$(echo "$response" | jq -r '.accessToken // empty')
            if [ -z "$access_token" ]; then
              echo "Failed to retrieve access token. Response: $response"
              exit 1
            fi

            echo "::set-output name=ACCESS_TOKEN::$access_token"
          }

          ACCESS_TOKEN=$(get_port_access_token)
          echo "Access token obtained: ${ACCESS_TOKEN:0:50}..."

  fetch_playlist_metadata:
    runs-on: ubuntu-latest
    needs: fetch_port_token
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    steps:
      - name: Fetch YouTube Playlist Metadata
        id: fetch_metadata
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          playlist_id=$(echo $playlist_response | jq -r '.items[0].id')
          playlist_title=$(echo $playlist_response | jq -r '.items[0].snippet.title')
          playlist_description=$(echo $playlist_response | jq -r '.items[0].snippet.description')
          playlist_thumbnail=$(echo $playlist_response | jq -r '.items[0].snippet.thumbnails.default.url')
          playlist_video_count=$(echo $playlist_response | jq -r '.items[0].contentDetails.itemCount')
          playlist_published_at=$(echo $playlist_response | jq -r '.items[0].snippet.publishedAt')

          if [ -z "$playlist_id" ]; then
            echo "Failed to fetch playlist details. Exiting."
            exit 1
          fi

          playlist_entity=$(jq -n --arg id "$playlist_id" --arg title "$playlist_title" \
            --arg description "$playlist_description" --arg thumbnailUrl "$playlist_thumbnail" \
            --arg videoCount "$playlist_video_count" --arg created_at "$playlist_published_at" \
            '{
              identifier: $id,
              title: $title,
              properties: {
                playlistId: $id,
                title: $title,
                description: $description,
                thumbnailUrl: $thumbnailUrl,
                videoCount: ($videoCount | tonumber),
                created_at: $created_at
              }
            }')

          echo "::set-output name=PLAYLIST_ENTITY::$playlist_entity"
          echo "Playlist entity created: $playlist_entity"

  push_playlist_to_port:
    runs-on: ubuntu-latest
    needs: fetch_playlist_metadata
    env:
      ACCESS_TOKEN: ${{ needs.fetch_port_token.outputs.ACCESS_TOKEN }}
    steps:
      - name: Push Playlist Data to Port
        run: |
          playlist_entity='${{ needs.fetch_playlist_metadata.outputs.PLAYLIST_ENTITY }}'

          if [ -z "$playlist_entity" ] || [ "$playlist_entity" == "null" ]; then
            echo "Error: playlist_entity is empty. Exiting."
            exit 1
          fi

          response=$(curl --http1.1 -s -w "%{http_code}\n" -o /tmp/playlist_response.json -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$playlist_entity")

          http_code=$(echo "$response" | head -c 1)
          body=$(cat /tmp/playlist_response.json)

          echo "HTTP Response Code: $http_code"
          echo "Response Body: $body"

          if [[ "$http_code" != "2" ]]; then
            echo "Failed to push playlist to Port. HTTP code: $http_code"
            exit 1
          fi

  fetch_videos:
    runs-on: ubuntu-latest
    needs: push_playlist_to_port
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
      ACCESS_TOKEN: ${{ needs.fetch_port_token.outputs.ACCESS_TOKEN }}
    steps:
      - name: Fetch and Process Videos
        id: process_videos
        run: |
          next_page_token=""
          while :; do
            url="https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}${next_page_token:+&pageToken=$next_page_token}"
            response=$(curl -s "$url")
            next_page_token=$(echo $response | jq -r '.nextPageToken // empty')

            video_ids=$(echo $response | jq -r '.items[].snippet.resourceId.videoId')
            for video_id in $video_ids; do
              video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=${YOUTUBE_API_KEY}")
              video_title=$(echo $video_details | jq -r '.items[0].snippet.title')
              video_description=$(echo $video_details | jq -r '.items[0].snippet.description')
              video_thumbnail=$(echo $video_details | jq -r '.items[0].snippet.thumbnails.default.url')
              video_duration=$(echo $video_details | jq -r '.items[0].contentDetails.duration')
              video_view_count=$(echo $video_details | jq -r '.items[0].statistics.viewCount // 0')
              video_like_count=$(echo $video_details | jq -r '.items[0].statistics.likeCount // 0')
              video_comment_count=$(echo $video_details | jq -r '.items[0].statistics.commentCount // 0')

              video_entity=$(jq -n --arg id "$video_id" --arg title "$video_title" \
                --arg description "$video_description" --arg thumbnailUrl "$video_thumbnail" \
                --arg duration "$video_duration" --argjson viewCount "$video_view_count" \
                --argjson likeCount "$video_like_count" --argjson commentCount "$video_comment_count" \
                --arg playlistId "$playlist_id" \
                '{
                  identifier: $id,
                  title: $title,
                  properties: {
                    videoId: $id,
                    title: $title,
                    description: $description,
                    thumbnailUrl: $thumbnailUrl,
                    duration: $duration,
                    viewCount: $viewCount,
                    likeCount: $likeCount,
                    commentCount: $commentCount
                  },
                  relations: {
                    belongs_to_playlist: $playlistId
                  }
                }')

              echo "::set-output name=VIDEO_ENTITY::$video_entity"
            done

            [[ -z "$next_page_token" ]] && break
          done

  push_videos_to_port:
    runs-on: ubuntu-latest
    needs: fetch_videos
    env:
      ACCESS_TOKEN: ${{ needs.fetch_port_token.outputs.ACCESS_TOKEN }}
    steps:
      - name: Push Videos to Port
        run: |
          video_entity='${{ needs.fetch_videos.outputs.VIDEO_ENTITY }}'

          if [ -z "$video_entity" ] || [ "$video_entity" == "null" ]; then
            echo "Error: video_entity is empty. Exiting."
            exit 1
          fi

          response=$(curl --http1.1 -s -w "%{http_code}\n" -o /tmp/video_response.json -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$video_entity")

          http_code=$(echo "$response" | head -c 1)
          body=$(cat /tmp/video_response.json)

          echo "HTTP Response Code: $http_code"
          echo "Response Body: $body"

          if [[ "$http_code" != "2" ]]; then
            echo "Failed to push video to Port. HTTP code: $http_code"
            exit 1
          fi
