name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  update_port:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}

    steps:
      # Previous steps remain the same until after Create Playlist in Port
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Create Python script
        run: |
          cat << 'EOF' > fetch_youtube.py
          # [Previous Python script content remains exactly the same]
          EOF

      - name: Fetch and Modify YouTube Playlist Data
        id: fetch_modify_data
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ inputs.playlistid }}
        run: python fetch_youtube.py

      - name: Create Playlist in Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          identifier: ${{ steps.fetch_modify_data.outputs.playlist_playlistId }}
          blueprint: playlist
          properties: |-
            {
              "playlistId": "${{ steps.fetch_modify_data.outputs.playlist_playlistId }}",
              "title": "${{ steps.fetch_modify_data.outputs.playlist_title }}",
              "description": "${{ steps.fetch_modify_data.outputs.playlist_description }}",
              "thumbnailUrl": "${{ steps.fetch_modify_data.outputs.playlist_thumbnailUrl }}",
              "videoCount": ${{ steps.fetch_modify_data.outputs.playlist_videoCount }},
              "created_at": "${{ steps.fetch_modify_data.outputs.playlist_created_at }}"
            }

      - name: Create Video Processing Script
        run: |
          cat << 'EOF' > process_videos.js
          const fs = require('fs');
          const { execSync } = require('child_process');

          // Get the number of videos from the output
          const videoCount = parseInt(process.env.VIDEO_COUNT);
          const playlistId = process.env.PLAYLIST_ID;

          for (let i = 0; i < videoCount; i++) {
            console.log(`Processing video ${i}`);
            
            const properties = {
              videoId: process.env[`videoId_${i}`],
              title: process.env[`title_${i}`],
              description: process.env[`description_${i}`],
              thumbnailUrl: process.env[`thumbnailUrl_${i}`],
              duration: process.env[`duration_${i}`],
              viewCount: parseInt(process.env[`viewCount_${i}`]),
              likeCount: parseInt(process.env[`likeCount_${i}`]),
              commentCount: parseInt(process.env[`commentCount_${i}`])
            };

            const config = {
              clientId: process.env.PORT_CLIENT_ID,
              clientSecret: process.env.PORT_CLIENT_SECRET,
              baseUrl: 'https://api.getport.io',
              operation: 'UPSERT',
              identifier: properties.videoId,
              blueprint: 'video',
              properties: JSON.stringify(properties),
              relations: JSON.stringify({
                belongs_to_playlist: playlistId
              })
            };

            // Create temporary config file for this video
            const configPath = `video_config_${i}.json`;
            fs.writeFileSync(configPath, JSON.stringify(config));

            // Run port-github-action for this video
            try {
              execSync(`npx port-github-action@latest ${configPath}`);
              console.log(`Successfully processed video ${i}`);
            } catch (error) {
              console.error(`Error processing video ${i}:`, error);
              process.exit(1);
            } finally {
              // Clean up temp file
              fs.unlinkSync(configPath);
            }
          }
          EOF

      - name: Process Videos
        run: |
          # Export all the video-related environment variables
          for i in {0..7}; do
            for key in videoId title description thumbnailUrl duration viewCount likeCount commentCount; do
              if [[ -n "${{ steps.fetch_modify_data.outputs[format('{0}_{1}', key, i)] }}" ]]; then
                export "${key}_${i}=${{ steps.fetch_modify_data.outputs[format('{0}_{1}', key, i)] }}"
              fi
            done
          done
          export VIDEO_COUNT=${{ steps.fetch_modify_data.outputs.video_count }}
          export PLAYLIST_ID=${{ steps.fetch_modify_data.outputs.playlist_playlistId }}
          
          # Run the Node.js script
          node process_videos.js
