name: Update Port with YouTube Playlist Data

on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  fetch_playlist_metadata:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      playlist_id: ${{ steps.fetch_metadata.outputs.PLAYLIST_ID }}
      playlist_data: ${{ steps.fetch_metadata.outputs.PLAYLIST_DATA }}
    steps:
      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)
          
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          ACCESS_TOKEN=$(echo "$response" | jq -r '.accessToken')
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Send Start Logs to Port
        id: start_log
        run: |
          set -e
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Starting playlist metadata fetch",
              "statusLabel": "Fetching Playlist"
            }'

      - name: Fetch YouTube Playlist Metadata
        id: fetch_metadata
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          playlist_id=$(echo $playlist_response | jq -r '.items[0].id')
          
          if [ -z "$playlist_id" ]; then
            echo "Failed to fetch playlist details. Exiting."
            exit 1
          fi
          playlist_data=$(echo $playlist_response | jq -c '.items[0] | {
            identifier: .id,
            title: .snippet.title,
            properties: {
              playlistId: .id,
              title: .snippet.title,
              description: .snippet.description,
              thumbnailUrl: .snippet.thumbnails.default.url,
              videoCount: .contentDetails.itemCount,
              created_at: .snippet.publishedAt
            }
          }')
          echo "PLAYLIST_ID=$playlist_id" >> $GITHUB_OUTPUT
          echo "PLAYLIST_DATA=$playlist_data" >> $GITHUB_OUTPUT

      - name: Send Completion Logs to Port
        if: success()
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Successfully fetched playlist metadata",
              "statusLabel": "Playlist Fetched"
            }'

  push_playlist_to_port:
    needs: fetch_playlist_metadata
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)
          
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          ACCESS_TOKEN=$(echo "$response" | jq -r '.accessToken')
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Send Start Logs to Port
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Starting playlist push to Port",
              "statusLabel": "Sending Playlist to Port"
            }'

      - name: Push Playlist Data to Port
        run: |
          playlist_entity='${{ needs.fetch_playlist_metadata.outputs.playlist_data }}'
          
          response=$(curl -s -w "%{http_code}" -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$playlist_entity")
          
          if [[ "${response: -3}" != "200" && "${response: -3}" != "201" ]]; then
            echo "Failed to push playlist to Port. Response: $response"
            exit 1
          fi

      - name: Send Completion Logs to Port
        if: success()
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Successfully pushed playlist to Port",
              "statusLabel": "Playlist Pushed"
            }'

  fetch_videos:
    needs: push_playlist_to_port
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      videos_data: ${{ steps.collect_videos.outputs.videos_json }}
    steps:
      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)
          
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          ACCESS_TOKEN=$(echo "$response" | jq -r '.accessToken')
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Send Start Logs to Port
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Starting video fetch from YouTube",
              "statusLabel": "Fetching Videos"
            }'

      - name: Collect Video Data
        id: collect_videos
        run: |
          echo '[]' > videos.json
          
          next_page_token=""
          
          while true; do
            page_token_param=""
            if [ ! -z "$next_page_token" ]; then
              page_token_param="&pageToken=$next_page_token"
            fi
            
            echo "Fetching playlist page..."
            playlist_items=$(curl -s "https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}${page_token_param}")
            
            video_ids=$(echo "$playlist_items" | jq -r '.items[].snippet.resourceId.videoId' | paste -sd ",")
            
            if [ ! -z "$video_ids" ]; then
              echo "Fetching video details..."
              video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_ids&key=${YOUTUBE_API_KEY}")
              
              echo "$video_details" | jq -c '.items[] | {
                identifier: .id,
                title: .snippet.title,
                properties: {
                  videoId: .id,
                  title: .snippet.title,
                  description: .snippet.description,
                  thumbnailUrl: .snippet.thumbnails.default.url,
                  duration: .contentDetails.duration,
                  viewCount: (.statistics.viewCount // "0" | tonumber),
                  likeCount: (.statistics.likeCount // "0" | tonumber),
                  commentCount: (.statistics.commentCount // "0" | tonumber),
                  publishedAt: .snippet.publishedAt
                },
                relations: {
                  belongs_to_playlist: "'"$PLAYLIST_ID"'"
                }
              }' | while read -r video; do
                if echo "$video" | jq -e 'has("identifier")' > /dev/null; then
                  tmp=$(mktemp)
                  jq --argjson video "$video" '. + [$video]' videos.json > "$tmp" && mv "$tmp" videos.json
                else
                  echo "Warning: Invalid video data structure, skipping"
                fi
              done
            fi
            
            next_page_token=$(echo "$playlist_items" | jq -r '.nextPageToken // empty')
            [ -z "$next_page_token" ] && break
            
            echo "Moving to next page..."
          done
          
          if ! jq -e 'type == "array"' videos.json > /dev/null; then
            echo "Error: Final videos.json is not a valid JSON array"
            exit 1
          fi
          
          videos_json=$(jq -c '.' videos.json)
          echo "videos_json<<EOF" >> $GITHUB_OUTPUT
          echo "$videos_json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Total videos collected: $(jq 'length' videos.json)"
          
          if [ -z "$videos_json" ]; then
            echo "Error: No videos data collected"
            exit 1
          fi
          
          echo "Output data preview:"
          echo "$videos_json" | jq '.[0]'

      - name: Send Completion Logs to Port
        if: success()
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Successfully fetched all videos",
              "statusLabel": "Videos Fetched"
            }'

  push_videos_to_port:
    needs: fetch_videos
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)
          
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          ACCESS_TOKEN=$(echo "$response" | jq -r '.accessToken')
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Push Videos to Port
        run: |
          echo "Raw videos data:"
          printf '%s\n' "${{ needs.fetch_videos.outputs.videos_data }}"
          
          if [ -z "${{ needs.fetch_videos.outputs.videos_data }}" ]; then
            echo "Error: No video data received from previous job"
            exit 1
          fi
          
          parsed_data=$(echo "${{ needs.fetch_videos.outputs.videos_data }}" | jq -r '.' 2>/dev/null)
          if [ $? -ne 0 ]; then
            echo "Error: Failed to parse JSON data"
            exit 1
          fi
          
          echo "$parsed_data" > videos_data.json
          
          if [ ! -f videos_data.json ]; then
            echo "Error: Failed to create videos_data.json"
            exit 1
          fi
          
          echo "Contents of videos_data.json:"
          cat videos_data.json
          
          if ! jq empty videos_data.json 2>/dev/null; then
            echo "Error: Invalid JSON in videos_data.json"
            exit 1
          fi
          
          if ! jq -e 'type == "array"' videos_data.json > /dev/null; then
            echo "Error: JSON data is not an array"
            echo "Content type: $(jq 'type' videos_data.json)"
            exit 1
          fi
          
          while IFS= read -r video; do
            if [ -z "$video" ]; then
              continue
            fi
            
            echo "Processing video data:"
            echo "$video" | jq '.'
            
            if ! echo "$video" | jq -e 'has("identifier") and has("title") and has("properties") and has("relations")' > /dev/null; then
              echo "Warning: Invalid video data structure, skipping"
              continue
            fi
            
            response=$(curl -s -w "\n%{http_code}" \
              -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$video")
            
            status_code=$(echo "$response" | tail -n1)
            response_body=$(echo "$response" | head -n -1)
            
            if [[ "$status_code" != "200" && "$status_code" != "201" ]]; then
              echo "Failed to push video. Status: $status_code"
              echo "Response: $response_body"
              
              PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
              video_id=$(echo "$video" | jq -r '.identifier')
              curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -d "{
                  \"message\": \"Failed to push video ${video_id}\",
                  \"statusLabel\": \"Error\"
                }"
              continue
            fi
            
            video_id=$(echo "$video" | jq -r '.identifier')
            echo "Successfully pushed video: $video_id"
            
            PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
            curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -d "{
                \"message\": \"Successfully pushed video ${video_id}\",
                \"statusLabel\": \"Processing\"
              }"
            
            sleep 0.5
          done < <(jq -c '.[]' videos_data.json)

      - name: Send Completion Logs to Port
        if: success()
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Completed pushing videos to Port",
              "statusLabel": "Complete"
            }'

      - name: Handle Job Completion
        if: always()
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          if [[ "$?" == "0" ]]; then
            STATUS_LABEL="Success"
            MESSAGE="Successfully completed video processing"
          else
            STATUS_LABEL="Failed"
            MESSAGE="Failed to complete video processing"
          fi
          
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d "{
              \"message\": \"$MESSAGE\",
              \"statusLabel\": \"$STATUS_LABEL\"
            }"
