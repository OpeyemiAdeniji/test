name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  update_port:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Create Python script
        run: |
          cat << 'EOF' > fetch_youtube.py
          import os
          import requests
          import json
          from datetime import datetime

          # Constants
          YOUTUBE_API_KEY = os.environ['YOUTUBE_API_KEY']
          playlist_id = os.environ['PLAYLIST_ID']

          def fetch_playlist_details(playlist_id):
              url = f'https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id={playlist_id}&key={YOUTUBE_API_KEY}'
              response = requests.get(url)
              response.raise_for_status()
              return response.json()['items'][0]

          def fetch_video_details(video_id):
              url = f'https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id={video_id}&key={YOUTUBE_API_KEY}'
              response = requests.get(url)
              response.raise_for_status()
              return response.json()['items'][0]

          def fetch_playlist_videos(playlist_id):
              videos = []
              url = f'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId={playlist_id}&key={YOUTUBE_API_KEY}'
              while url:
                  response = requests.get(url)
                  response.raise_for_status()
                  data = response.json()
                  for item in data.get('items', []):
                      video_id = item['snippet']['resourceId']['videoId']
                      video_details = fetch_video_details(video_id)
                      videos.append(video_details)
                  next_page_token = data.get('nextPageToken')
                  if next_page_token:
                      url = f'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&pageToken={next_page_token}&playlistId={playlist_id}&key={YOUTUBE_API_KEY}'
                  else:
                      url = None
              return videos

          def sanitize_value(value):
              if isinstance(value, str):
                  return value.replace('\n', ' ').replace('\r', ' ').replace('"', '\\"').strip()
              return value

          # Fetch playlist details
          playlist = fetch_playlist_details(playlist_id)
          playlist_data = {
              "playlistId": playlist['id'],
              "title": sanitize_value(playlist['snippet']['title']),
              "description": sanitize_value(playlist['snippet']['description']),
              "thumbnailUrl": playlist['snippet']['thumbnails']['default']['url'],
              "videoCount": playlist['contentDetails']['itemCount'],
              "created_at": playlist['snippet']['publishedAt']
          }

          # Write playlist data to GITHUB_OUTPUT
          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              delimiter = "PLAYLIST_DATA_EOF"
              print(f"playlist_data<<{delimiter}", file=fh)
              print(json.dumps(playlist_data), file=fh)
              print(delimiter, file=fh)

          # Fetch videos
          videos = fetch_playlist_videos(playlist_id)
          videos_data = []
          
          for video in videos:
              snippet = video['snippet']
              statistics = video.get('statistics', {})
              content_details = video.get('contentDetails', {})
              
              video_data = {
                  "videoId": video['id'],
                  "title": sanitize_value(snippet['title']),
                  "description": sanitize_value(snippet['description']),
                  "thumbnailUrl": snippet['thumbnails']['default']['url'],
                  "duration": content_details.get('duration', ''),
                  "viewCount": int(statistics.get('viewCount', 0)),
                  "likeCount": int(statistics.get('likeCount', 0)),
                  "commentCount": int(statistics.get('commentCount', 0))
              }
              videos_data.append(video_data)

          # Write videos data to GITHUB_OUTPUT
          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              delimiter = "VIDEOS_DATA_EOF"
              print(f"videos_data<<{delimiter}", file=fh)
              print(json.dumps(videos_data), file=fh)
              print(delimiter, file=fh)
          EOF

      - name: Fetch and Modify YouTube Playlist Data
        id: fetch_modify_data
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ inputs.playlistid }}
        run: python fetch_youtube.py

      - name: Create Playlist in Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          identifier: ${{ fromJson(steps.fetch_modify_data.outputs.playlist_data).playlistId }}
          blueprint: playlist
          properties: ${{ steps.fetch_modify_data.outputs.playlist_data }}

      - name: Create Port API Script for Videos
        if: steps.fetch_modify_data.outputs.videos_data != ''
        run: |
          python3 << 'EOF'
          import json
          import os
          import sys
          
          # Parse the videos data
          videos_data = json.loads('''${{ steps.fetch_modify_data.outputs.videos_data }}''')
          playlist_data = json.loads('''${{ steps.fetch_modify_data.outputs.playlist_data }}''')
          
          # Generate the GitHub Actions commands for each video
          for video in videos_data:
              properties = json.dumps(video)
              relations = json.dumps({"belongs_to_playlist": playlist_data["playlistId"]})
              
              print(f"::group::Creating video {video['videoId']}")
              os.system(f'''
                port-github-action \\
                  --client-id "$PORT_CLIENT_ID" \\
                  --client-secret "$PORT_CLIENT_SECRET" \\
                  --base-url "https://api.getport.io" \\
                  --operation "UPSERT" \\
                  --identifier "{video['videoId']}" \\
                  --blueprint "video" \\
                  --properties '{properties}' \\
                  --relations '{relations}'
              ''')
              print("::endgroup::")
          EOF
