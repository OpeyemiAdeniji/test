name: Update Port with YouTube Playlist Data

on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq for JSON processing
        run: sudo apt-get install jq

      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)

          # Function to get Port access token
          get_port_access_token() {
            response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
              -H "Content-Type: application/json" \
              -d '{
                "clientId": "'"$PORT_CLIENT_ID"'",
                "clientSecret": "'"$PORT_CLIENT_SECRET"'"
              }')

            access_token=$(echo "$response" | jq -r '.accessToken // empty')
            echo "$access_token"
          }

          ACCESS_TOKEN=$(get_port_access_token)
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Send Logs to Port
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Setting up environment",
              "terminationStatus": "SUCCESS",
              "statusLabel": "Setup Complete"
            }'

  fetch_playlist_metadata:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      PLAYLIST_ID: ${{ steps.fetch_metadata.outputs.PLAYLIST_ID }}
      PLAYLIST_DATA: ${{ steps.fetch_metadata.outputs.PLAYLIST_DATA }}
    steps:
      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)

          # Function to get Port access token
          get_port_access_token() {
            response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
              -H "Content-Type: application/json" \
              -d '{
                "clientId": "'"$PORT_CLIENT_ID"'",
                "clientSecret": "'"$PORT_CLIENT_SECRET"'"
              }')

            access_token=$(echo "$response" | jq -r '.accessToken // empty')
            echo "$access_token"
          }

          ACCESS_TOKEN=$(get_port_access_token)
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Log Fetch Start
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Starting to fetch playlist metadata",
              "terminationStatus": "SUCCESS",
              "statusLabel": "Fetching Metadata"
            }'

      - name: Fetch YouTube Playlist Metadata
        id: fetch_metadata
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          playlist_id=$(echo $playlist_response | jq -r '.items[0].id')
          
          if [ -z "$playlist_id" ]; then
            # Log failure
            PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
            curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -d '{
                "message": "Failed to fetch playlist details",
                "terminationStatus": "FAILURE",
                "statusLabel": "Fetch Failed"
              }'
            echo "Failed to fetch playlist details. Exiting."
            exit 1
          fi

          playlist_data=$(echo $playlist_response | jq -c '.items[0] | {
            identifier: .id,
            title: .snippet.title,
            properties: {
              playlistId: .id,
              title: .snippet.title,
              description: .snippet.description,
              thumbnailUrl: .snippet.thumbnails.default.url,
              videoCount: .contentDetails.itemCount,
              created_at: .snippet.publishedAt
            }
          }')

          echo "PLAYLIST_ID=$playlist_id" >> $GITHUB_OUTPUT
          echo "PLAYLIST_DATA=$playlist_data" >> $GITHUB_OUTPUT

          # Log success
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Successfully fetched playlist metadata",
              "terminationStatus": "SUCCESS",
              "statusLabel": "Metadata Fetched"
            }'

  push_playlist_to_port:
    runs-on: ubuntu-latest
    needs: fetch_playlist_metadata
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)
          
          ACCESS_TOKEN=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }' | jq -r '.accessToken')
          
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Log Push Start
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Starting to push playlist to Port",
              "terminationStatus": "SUCCESS",
              "statusLabel": "Pushing Playlist"
            }'

      - name: Push Playlist Data to Port
        run: |
          playlist_entity='${{ needs.fetch_playlist_metadata.outputs.PLAYLIST_DATA }}'
          
          response=$(curl -s -w "%{http_code}" -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$playlist_entity")
          
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          
          if [[ "${response: -3}" != "200" && "${response: -3}" != "201" ]]; then
            echo "Failed to push playlist to Port. Response: $response"
            curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -d '{
                "message": "Failed to push playlist to Port",
                "terminationStatus": "FAILURE",
                "statusLabel": "Push Failed"
              }'
            exit 1
          fi

          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Successfully pushed playlist to Port",
              "terminationStatus": "SUCCESS",
              "statusLabel": "Playlist Pushed"
            }'

  fetch_videos:
    runs-on: ubuntu-latest
    needs: [push_playlist_to_port, fetch_playlist_metadata]
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      videos_array: ${{ steps.process_videos.outputs.videos_array }}
    steps:
      - name: Generate Access Token
        id: token
        run: |
          ACCESS_TOKEN=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }' | jq -r '.accessToken')
          
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Log Fetch Start
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Starting to fetch videos from playlist",
              "terminationStatus": "SUCCESS",
              "statusLabel": "Fetching Videos"
            }'

      - name: Fetch and Process Videos
        id: process_videos
        run: |
          # Initialize videos array
          videos_array="[]"
          next_page_token=""
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          
          while true; do
            # Log page fetch
            curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -d '{
                "message": "Fetching next page of videos",
                "terminationStatus": "SUCCESS",
                "statusLabel": "Processing"
              }'
              
            # Rest of your existing video fetching code
            playlist_items_url="https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}${next_page_token:+&pageToken=$next_page_token}"
            playlist_response=$(curl -s "$playlist_items_url")
            
            video_ids=$(echo "$playlist_response" | jq -r '.items[].snippet.resourceId.videoId')
            
            for video_id in $video_ids; do
              [ -z "$video_id" ] && continue
              video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=${YOUTUBE_API_KEY}")
              video_json=$(echo $video_details | jq -c '.items[0] | {
                identifier: .id,
                title: .snippet.title,
                properties: {
                  videoId: .id,
                  title: .snippet.title,
                  description: .snippet.description,
                  thumbnailUrl: .snippet.thumbnails.default.url,
                  duration: .contentDetails.duration,
                  viewCount: (.statistics.viewCount // "0" | tonumber),
                  likeCount: (.statistics.likeCount // "0" | tonumber),
                  commentCount: (.statistics.commentCount // "0" | tonumber)
                },
                relations: {
                  belongs_to_playlist: "'"${{ needs.fetch_playlist_metadata.outputs.PLAYLIST_ID }}"'"
                }
              }')
              videos_array=$(echo $videos_array | jq --argjson video "$video_json" '. + [$video]')
            done
            
            next_page_token=$(echo $playlist_response | jq -r '.nextPageToken // empty')
            [ -z "$next_page_token" ] && break
          done
          
          # Log completion
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Completed fetching all videos",
              "terminationStatus": "SUCCESS",
              "statusLabel": "Videos Fetched"
            }'
          
          escaped_array=$(echo "$videos_array" | jq -R -s .)
          echo "videos_array=$escaped_array" >> $GITHUB_OUTPUT

  push_videos_to_port:
    runs-on: ubuntu-latest
    needs: fetch_videos
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)
          
          ACCESS_TOKEN=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }' | jq -r '.accessToken')
          
          echo "ACCESS_TOKEN=$ACCESS_
