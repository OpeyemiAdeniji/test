name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq for JSON processing
        run: sudo apt-get install jq

  fetch_port_token:
    runs-on: ubuntu-latest
    needs: setup_environment
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    outputs:
      ACCESS_TOKEN: ${{ steps.get_token.outputs.ACCESS_TOKEN }}
    steps:
      - name: Fetch Port Access Token
        id: get_token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)

          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }')

          if echo "$response" | grep -q '"ok":false'; then
            echo "Error obtaining access token: $(echo "$response" | jq -r '.error')"
            exit 1
          fi

          access_token=$(echo "$response" | jq -r '.accessToken // empty')
          if [ -z "$access_token" ]; then
            echo "Failed to retrieve access token. Response: $response"
            exit 1
          fi

          echo "::add-mask::$access_token"
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_OUTPUT

  fetch_playlist_metadata:
    runs-on: ubuntu-latest
    needs: fetch_port_token
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      PLAYLIST_ID: ${{ steps.fetch_metadata.outputs.PLAYLIST_ID }}
      PLAYLIST_DATA: ${{ steps.fetch_metadata.outputs.PLAYLIST_DATA }}
    steps:
      - name: Fetch YouTube Playlist Metadata
        id: fetch_metadata
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          playlist_id=$(echo $playlist_response | jq -r '.items[0].id')
          
          if [ -z "$playlist_id" ]; then
            echo "Failed to fetch playlist details. Exiting."
            exit 1
          fi

          # Create JSON and escape it properly for GitHub Actions output
          playlist_data=$(echo $playlist_response | jq -c '.items[0] | {
            identifier: .id,
            title: .snippet.title,
            properties: {
              playlistId: .id,
              title: .snippet.title,
              description: .snippet.description,
              thumbnailUrl: .snippet.thumbnails.default.url,
              videoCount: .contentDetails.itemCount,
              created_at: .snippet.publishedAt
            }
          }')

          # Properly escape the JSON for GitHub Actions output
          playlist_data_escaped=$(echo "$playlist_data" | jq -c -R .)
          echo "PLAYLIST_ID=$playlist_id" >> $GITHUB_OUTPUT
          echo "PLAYLIST_DATA=$playlist_data_escaped" >> $GITHUB_OUTPUT

  push_playlist_to_port:
    runs-on: ubuntu-latest
    needs: [fetch_port_token, fetch_playlist_metadata]
    steps:
      - name: Push Playlist Data to Port
        run: |
          # Decode the escaped JSON
          playlist_entity=$(echo '${{ needs.fetch_playlist_metadata.outputs.PLAYLIST_DATA }}' | jq -r .)

          response=$(curl -s -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: Bearer ${{ needs.fetch_port_token.outputs.ACCESS_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$playlist_entity")

          if ! echo "$response" | jq empty; then
            echo "Error: Invalid JSON response"
            echo "$response"
            exit 1
          fi

          if [[ $(echo "$response" | jq -r '.ok // false') != "true" ]]; then
            echo "Failed to push playlist to Port. Response:"
            echo "$response" | jq '.'
            exit 1
          fi

  fetch_videos:
    runs-on: ubuntu-latest
    needs: [push_playlist_to_port, fetch_playlist_metadata]
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      VIDEOS_DATA: ${{ steps.process_videos.outputs.VIDEOS_DATA }}
    steps:
      - name: Fetch and Process Videos
        id: process_videos
        run: |
          videos_data="["
          separator=""
          next_page_token=""
          
          while :; do
            url="https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}${next_page_token:+&pageToken=$next_page_token}"
            response=$(curl -s "$url")
            next_page_token=$(echo $response | jq -r '.nextPageToken // empty')

            # Process each video
            while IFS= read -r video_id; do
              [ -z "$video_id" ] && continue
              
              video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=${YOUTUBE_API_KEY}")
              
              video_json=$(echo $video_details | jq -c '.items[0] | {
                identifier: .id,
                title: .snippet.title,
                properties: {
                  videoId: .id,
                  title: .snippet.title,
                  description: .snippet.description,
                  thumbnailUrl: .snippet.thumbnails.default.url,
                  duration: .contentDetails.duration,
                  viewCount: (.statistics.viewCount // "0" | tonumber),
                  likeCount: (.statistics.likeCount // "0" | tonumber),
                  commentCount: (.statistics.commentCount // "0" | tonumber)
                },
                relations: {
                  belongs_to_playlist: "${{ needs.fetch_playlist_metadata.outputs.PLAYLIST_ID }}"
                }
              }')
              
              videos_data="${videos_data}${separator}${video_json}"
              separator=","
              
            done < <(echo "$response" | jq -r '.items[].snippet.resourceId.videoId')

            [[ -z "$next_page_token" ]] && break
          done

          videos_data="${videos_data}]"
          
          # Escape the JSON array for GitHub Actions output
          videos_data_escaped=$(echo "$videos_data" | jq -c -R .)
          echo "VIDEOS_DATA=$videos_data_escaped" >> $GITHUB_OUTPUT

  push_videos_to_port:
    runs-on: ubuntu-latest
    needs: [fetch_port_token, fetch_videos]
    steps:
      - name: Push Videos to Port
        run: |
          # Decode the escaped JSON array
          videos_array=$(echo '${{ needs.fetch_videos.outputs.VIDEOS_DATA }}' | jq -r .)
          
          # Process each video in the array
          echo "$videos_array" | jq -c '.[]' | while read -r video_entity; do
            response=$(curl -s -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
              -H "Authorization: Bearer ${{ needs.fetch_port_token.outputs.ACCESS_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$video_entity")

            if ! echo "$response" | jq empty; then
              echo "Error: Invalid JSON response"
              echo "$response"
              exit 1
            fi

            if [[ $(echo "$response" | jq -r '.ok // false') != "true" ]]; then
              echo "Failed to push video to Port. Response:"
              echo "$response" | jq '.'
              exit 1
            fi
          done
