name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq for JSON processing
        run: sudo apt-get install jq

  fetch_port_token:
    runs-on: ubuntu-latest
    needs: setup_environment
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    outputs:
      ACCESS_TOKEN: ${{ steps.get_token.outputs.ACCESS_TOKEN }}
    steps:
      - name: Fetch Port Access Token
        id: get_token
        run: |
          set -e
          
          # Validate client credentials
          if [ -z "$PORT_CLIENT_ID" ] || [ -z "$PORT_CLIENT_SECRET" ]; then
            echo "Error: PORT_CLIENT_ID or PORT_CLIENT_SECRET is empty"
            exit 1
          fi
          
          # Clean the credentials
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)

          # Fetch access token
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }')

          # Validate response
          if ! echo "$response" | jq empty; then
            echo "Error: Invalid JSON response from auth endpoint"
            exit 1
          fi

          # Check for errors
          if echo "$response" | jq -e '.error' > /dev/null; then
            echo "Error obtaining access token: $(echo "$response" | jq -r '.error')"
            exit 1
          fi

          # Extract and validate access token
          access_token=$(echo "$response" | jq -r '.accessToken // empty')
          if [ -z "$access_token" ]; then
            echo "Failed to retrieve access token. Response: $response"
            exit 1
          fi

          # Verify token format (should be a non-empty string)
          if ! [[ "$access_token" =~ ^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$ ]]; then
            echo "Error: Invalid token format"
            exit 1
          fi

          # Test token with a simple API call
          test_response=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $access_token" \
            "https://api.getport.io/v1/blueprints")

          if [ "$test_response" == "401" ]; then
            echo "Error: Token validation failed"
            exit 1
          fi

          # Mask token in logs and set output
          echo "::add-mask::$access_token"
          echo "ACCESS_TOKEN=$access_token" >> $GITHUB_OUTPUT

  fetch_playlist_metadata:
    runs-on: ubuntu-latest
    needs: fetch_port_token
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      PLAYLIST_ID: ${{ steps.fetch_metadata.outputs.PLAYLIST_ID }}
      PLAYLIST_DATA: ${{ steps.fetch_metadata.outputs.PLAYLIST_DATA }}
    steps:
      - name: Fetch YouTube Playlist Metadata
        id: fetch_metadata
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          playlist_id=$(echo $playlist_response | jq -r '.items[0].id')
          
          if [ -z "$playlist_id" ]; then
            echo "Failed to fetch playlist details. Exiting."
            exit 1
          fi

          playlist_data=$(echo $playlist_response | jq -c '.items[0] | {
            identifier: .id,
            title: .snippet.title,
            properties: {
              playlistId: .id,
              title: .snippet.title,
              description: .snippet.description,
              thumbnailUrl: .snippet.thumbnails.default.url,
              videoCount: .contentDetails.itemCount,
              created_at: .snippet.publishedAt
            }
          }')

          # Validate JSON before setting output
          if ! echo "$playlist_data" | jq empty; then
            echo "Error: Invalid playlist data JSON"
            exit 1
          fi

          playlist_data_escaped=$(echo "$playlist_data" | jq -c -R .)
          echo "PLAYLIST_ID=$playlist_id" >> $GITHUB_OUTPUT
          echo "PLAYLIST_DATA=$playlist_data_escaped" >> $GITHUB_OUTPUT

  push_playlist_to_port:
    runs-on: ubuntu-latest
    needs: [fetch_port_token, fetch_playlist_metadata]
    steps:
      - name: Push Playlist Data to Port
        run: |
          # Get and validate access token
          ACCESS_TOKEN="${{ needs.fetch_port_token.outputs.ACCESS_TOKEN }}"
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Error: Access token is empty"
            exit 1
          fi

          # Validate token format
          if ! [[ "$ACCESS_TOKEN" =~ ^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$ ]]; then
            echo "Error: Invalid token format"
            exit 1
          fi

          # Decode and validate playlist data
          playlist_entity=$(echo '${{ needs.fetch_playlist_metadata.outputs.PLAYLIST_DATA }}' | jq -r .)
          if ! echo "$playlist_entity" | jq empty; then
            echo "Error: Invalid playlist entity JSON"
            exit 1
          fi

          # Make request to Port API with proper error handling
          response=$(curl -s -X POST \
            "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$playlist_entity")

          # Check HTTP response
          if [ $? -ne 0 ]; then
            echo "Error: Failed to make request to Port API"
            exit 1
          fi

          # Validate response JSON
          if ! echo "$response" | jq empty; then
            echo "Error: Invalid JSON response from Port API"
            echo "$response"
            exit 1
          fi

          # Check for API errors
          if [[ $(echo "$response" | jq -r '.ok // false') != "true" ]]; then
            echo "Failed to push playlist to Port. Response:"
            echo "$response" | jq '.'
            # Print detailed error information
            echo "Error details:"
            echo "Message: $(echo "$response" | jq -r '.message // "No message"')"
            echo "Error: $(echo "$response" | jq -r '.error // "No error"')"
            exit 1
          fi

          echo "Successfully pushed playlist to Port"

  fetch_videos:
    runs-on: ubuntu-latest
    needs: [push_playlist_to_port, fetch_playlist_metadata, fetch_port_token]
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
      ACCESS_TOKEN: ${{ needs.fetch_port_token.outputs.ACCESS_TOKEN }}
    outputs:
      VIDEOS_DATA: ${{ steps.process_videos.outputs.VIDEOS_DATA }}
    steps:
      - name: Validate Access Token
        run: |
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Error: Access token is empty"
            exit 1
          fi

          if ! [[ "$ACCESS_TOKEN" =~ ^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$ ]]; then
            echo "Error: Invalid token format"
            exit 1
          fi

      - name: Fetch and Process Videos
        id: process_videos
        run: |
          videos_data="["
          separator=""
          next_page_token=""
          
          while :; do
            url="https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}${next_page_token:+&pageToken=$next_page_token}"
            response=$(curl -s "$url")
            
            if ! echo "$response" | jq empty; then
              echo "Error: Invalid JSON response from YouTube API"
              exit 1
            fi
            
            next_page_token=$(echo $response | jq -r '.nextPageToken // empty')

            while IFS= read -r video_id; do
              [ -z "$video_id" ] && continue
              
              video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=${YOUTUBE_API_KEY}")
              
              if ! echo "$video_details" | jq empty; then
                echo "Error: Invalid JSON response for video details"
                continue
              fi
              
              video_json=$(echo $video_details | jq -c '.items[0] | {
                identifier: .id,
                title: .snippet.title,
                properties: {
                  videoId: .id,
                  title: .snippet.title,
                  description: .snippet.description,
                  thumbnailUrl: .snippet.thumbnails.default.url,
                  duration: .contentDetails.duration,
                  viewCount: (.statistics.viewCount // "0" | tonumber),
                  likeCount: (.statistics.likeCount // "0" | tonumber),
                  commentCount: (.statistics.commentCount // "0" | tonumber)
                },
                relations: {
                  belongs_to_playlist: "${{ needs.fetch_playlist_metadata.outputs.PLAYLIST_ID }}"
                }
              }')
              
              videos_data="${videos_data}${separator}${video_json}"
              separator=","
              
            done < <(echo "$response" | jq -r '.items[].snippet.resourceId.videoId')

            [[ -z "$next_page_token" ]] && break
          done

          videos_data="${videos_data}]"
          
          if ! echo "$videos_data" | jq empty; then
            echo "Error: Invalid final videos data JSON"
            exit 1
          fi
          
          videos_data_escaped=$(echo "$videos_data" | jq -c -R .)
          echo "VIDEOS_DATA=$videos_data_escaped" >> $GITHUB_OUTPUT

  push_videos_to_port:
    runs-on: ubuntu-latest
    needs: [fetch_port_token, fetch_videos]
    steps:
      - name: Push Videos to Port
        run: |
          # Get and validate access token
          ACCESS_TOKEN="${{ needs.fetch_port_token.outputs.ACCESS_TOKEN }}"
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Error: Access token is empty"
            exit 1
          fi

          if ! [[ "$ACCESS_TOKEN" =~ ^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$ ]]; then
            echo "Error: Invalid token format"
            exit 1
          fi

          # Decode and validate videos data
          videos_array=$(echo '${{ needs.fetch_videos.outputs.VIDEOS_DATA }}' | jq -r .)
          if ! echo "$videos_array" | jq empty; then
            echo "Error: Invalid videos array JSON"
            exit 1
          fi

          # Process each video
          echo "$videos_array" | jq -c '.[]' | while read -r video_entity; do
            response=$(curl -s -X POST \
              "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$video_entity")

            if ! echo "$response" | jq empty; then
              echo "Error: Invalid JSON response"
              echo "$response"
              continue
            fi

            if [[ $(echo "$response" | jq -r '.ok // false') != "true" ]]; then
              echo "Failed to push video to Port. Response:"
              echo "$response" | jq '.'
              continue
            fi

            echo "Successfully pushed video to Port"
          done
