name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  update_port:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Create Python script
        run: |
          cat << 'EOF' > fetch_youtube.py
          import os
          import requests
          import json
          import sys
          import re
          from datetime import datetime

          # Constants
          YOUTUBE_API_KEY = os.environ['YOUTUBE_API_KEY']
          playlist_id = os.environ['PLAYLIST_ID']

          def sanitize_string(s):
              """Sanitize string for GitHub Actions output"""
              if not isinstance(s, str):
                  s = str(s)
              s = s.replace('\n', ' ').replace('\r', ' ')
              s = re.sub(r'\s+', ' ', s)
              s = s.replace('%', '%25')
              s = s.replace('\r', '%0D')
              s = s.replace('\n', '%0A')
              s = s.replace(':', '%3A')
              s = s.replace(',', '%2C')
              return s.strip()

          def fetch_playlist_details(playlist_id):
              try:
                  url = f'https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id={playlist_id}&key={YOUTUBE_API_KEY}'
                  response = requests.get(url)
                  response.raise_for_status()
                  data = response.json()
                  if not data.get('items'):
                      raise ValueError(f"No playlist found with ID: {playlist_id}")
                  return data['items'][0]
              except requests.exceptions.RequestException as e:
                  raise Exception(f"Failed to fetch playlist details: {str(e)}")

          def fetch_video_details(video_id):
              try:
                  url = f'https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id={video_id}&key={YOUTUBE_API_KEY}'
                  response = requests.get(url)
                  response.raise_for_status()
                  data = response.json()
                  if not data.get('items'):
                      raise ValueError(f"No video found with ID: {video_id}")
                  return data['items'][0]
              except requests.exceptions.RequestException as e:
                  raise Exception(f"Failed to fetch video details: {str(e)}")

          def fetch_playlist_videos(playlist_id):
              videos = []
              next_page_token = None
              video_data_list = []
              
              try:
                  while True:
                      url = f'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId={playlist_id}&key={YOUTUBE_API_KEY}'
                      if next_page_token:
                          url += f'&pageToken={next_page_token}'
                      
                      response = requests.get(url)
                      response.raise_for_status()
                      data = response.json()
                      
                      for item in data.get('items', []):
                          try:
                              video_id = item['snippet']['resourceId']['videoId']
                              video_details = fetch_video_details(video_id)
                              videos.append(video_details)
                              
                              # Create video data object
                              snippet = video_details['snippet']
                              statistics = video_details.get('statistics', {})
                              content_details = video_details.get('contentDetails', {})
                              
                              video_data = {
                                  "identifier": video_id,
                                  "properties": {
                                      "videoId": video_id,
                                      "title": snippet['title'],
                                      "description": snippet['description'],
                                      "thumbnailUrl": snippet.get('thumbnails', {}).get('default', {}).get('url', ''),
                                      "duration": content_details.get('duration', ''),
                                      "viewCount": int(statistics.get('viewCount', 0)),
                                      "likeCount": int(statistics.get('likeCount', 0)),
                                      "commentCount": int(statistics.get('commentCount', 0))
                                  }
                              }
                              video_data_list.append(video_data)
                          except Exception as e:
                              print(f"Warning: Skipping video {video_id}: {str(e)}")
                              continue
                      
                      next_page_token = data.get('nextPageToken')
                      if not next_page_token:
                          break
                          
                  return videos, video_data_list
              except Exception as e:
                  raise Exception(f"Failed to fetch playlist videos: {str(e)}")

          try:
              # Fetch playlist details
              playlist = fetch_playlist_details(playlist_id)
              playlist_data = {
                  "playlistId": playlist['id'],
                  "title": playlist['snippet']['title'],
                  "description": playlist['snippet']['description'],
                  "thumbnailUrl": playlist['snippet'].get('thumbnails', {}).get('default', {}).get('url', ''),
                  "videoCount": playlist['contentDetails']['itemCount'],
                  "created_at": playlist['snippet']['publishedAt']
              }

              # Write playlist data to GITHUB_OUTPUT
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  for key, value in playlist_data.items():
                      sanitized_value = sanitize_string(value)
                      print(f"playlist_{key}={sanitized_value}", file=fh)

              # Fetch videos
              videos, video_data_list = fetch_playlist_videos(playlist_id)
              
              # Write video data to GITHUB_OUTPUT
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  # Write video data list as JSON for UPSERT_MANY
                  print(f"video_items={json.dumps(video_data_list)}", file=fh)
                  
                  # Write video IDs for relations
                  video_ids = [v["identifier"] for v in video_data_list]
                  print(f"video_ids={json.dumps(video_ids)}", file=fh)
                  
                  print(f"video_count={len(videos)}", file=fh)

          except Exception as e:
              print(f"Error: {str(e)}", file=sys.stderr)
              sys.exit(1)
          EOF

      - name: Fetch and Modify YouTube Playlist Data
        id: fetch_modify_data
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ inputs.playlistid }}
        run: python fetch_youtube.py

      - name: Create Video Entities in Port
        if: steps.fetch_modify_data.outputs.video_count > 0
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          blueprint: video
          items: ${{ steps.fetch_modify_data.outputs.video_items }}

      - name: Create Playlist in Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          identifier: ${{ steps.fetch_modify_data.outputs.playlist_playlistId }}
          blueprint: playlist
          properties: |-
            {
              "playlistId": "${{ steps.fetch_modify_data.outputs.playlist_playlistId }}",
              "title": "${{ steps.fetch_modify_data.outputs.playlist_title }}",
              "description": "${{ steps.fetch_modify_data.outputs.playlist_description }}",
              "thumbnailUrl": "${{ steps.fetch_modify_data.outputs.playlist_thumbnailUrl }}",
              "videoCount": ${{ steps.fetch_modify_data.outputs.playlist_videoCount }},
              "created_at": "${{ steps.fetch_modify_data.outputs.playlist_created_at }}"
            }
          relations: |-
            {
              "has_videos": ${{ steps.fetch_modify_data.outputs.video_ids }}
            }
