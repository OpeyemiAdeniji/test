name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  update_port:
    runs-on: ubuntu-latest
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch and Process YouTube Data
        id: fetch_data
        env:
          PLAYLIST_ID: ${{ inputs.playlistid }}
        run: |
          # Constants and setup
          echo "YOUTUBE_API_KEY: $YOUTUBE_API_KEY"
          echo "PLAYLIST_ID: $PLAYLIST_ID"
          echo "PORT_CLIENT_ID: $PORT_CLIENT_ID"
          echo "PORT_CLIENT_SECRET: $PORT_CLIENT_SECRET"

          # Function to sanitize values
          sanitize_value() {
            local value="$1"
            echo "${value//$'\n'/ }"
            echo "${REPLY//$'\r'/ }"
            echo "${REPLY//\"/\\\"}"
            echo "${REPLY%% }"
          }

          # Get Port access token
          token_response=$(curl -X POST -H "Content-Type: application/json" -d "{\"clientId\":\"$PORT_CLIENT_ID\",\"clientSecret\":\"$PORT_CLIENT_SECRET\"}" https://api.getport.io/v1/auth/access_token)
          access_token=$(echo $token_response | jq -r '.accessToken')
          echo "Access token - $access_token"

          # Fetch playlist details
          playlist_response=$(curl -H "Authorization: Bearer $access_token" https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=$PLAYLIST_ID&key=$YOUTUBE_API_KEY)
          playlist=$(echo $playlist_response | jq -r '.items[0]')

          # Create playlist in Port
          playlist_entity="{
            \"identifier\": \"$(echo $playlist | jq -r '.id')\",
            \"title\": \"$(sanitize_value \"$(echo $playlist | jq -r '.snippet.title')\")\",
            \"properties\": {
              \"playlistId\": \"$(echo $playlist | jq -r '.id')\",
              \"title\": \"$(sanitize_value \"$(echo $playlist | jq -r '.snippet.title')\")\",
              \"description\": \"$(sanitize_value \"$(echo $playlist | jq -r '.snippet.description')\")\",
              \"thumbnailUrl\": \"$(echo $playlist | jq -r '.snippet.thumbnails.default.url')\",
              \"videoCount\": $(echo $playlist | jq -r '.contentDetails.itemCount'),
              \"created_at\": \"$(echo $playlist | jq -r '.snippet.publishedAt')\"
            }
          }"
          playlist_response=$(curl -X POST -H "Authorization: Bearer $access_token" -H "Content-Type: application/json" -d "$playlist_entity" https://api.getport.io/v1/blueprints/playlist/entities?upsert=true)
          echo "Playlist sync status: $playlist_response"

          # Fetch and upload videos
          next_page_token=""
          while true; do
            video_response=$(curl -H "Authorization: Bearer $access_token" https://www.googleapis.com/youtube/v3/playlistItems?part=snippet,contentDetails,statistics&maxResults=50&playlistId=$PLAYLIST_ID&pageToken=$next_page_token&key=$YOUTUBE_API_KEY)
            videos=$(echo $video_response | jq -r '.items[]')

            for video in $videos; do
              video_id=$(echo $video | jq -r '.snippet.resourceId.videoId')
              video_details=$(curl -H "Authorization: Bearer $access_token" https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=$YOUTUBE_API_KEY)
              video_data=$(echo $video_details | jq -r '.items[0]')

              video_entity="{
                \"identifier\": \"$(echo $video_data | jq -r '.id')\",
                \"title\": \"$(sanitize_value \"$(echo $video_data | jq -r '.snippet.title')\")\",
                \"properties\": {
                  \"videoId\": \"$(echo $video_data | jq -r '.id')\",
                  \"title\": \"$(sanitize_value \"$(echo $video_data | jq -r '.snippet.title')\")\",
                  \"description\": \"$(sanitize_value \"$(echo $video_data | jq -r '.snippet.description')\")\",
                  \"thumbnailUrl\": \"$(echo $video_data | jq -r '.snippet.thumbnails.default.url')\",
                  \"duration\": \"$(echo $video_data | jq -r '.contentDetails.duration')\",
                  \"viewCount\": $(echo $video_data | jq -r '.statistics.viewCount'),
                  \"likeCount\": $(echo $video_data | jq -r '.statistics.likeCount'),
                  \"commentCount\": $(echo $video_data | jq -r '.statistics.commentCount')
                },
                \"relations\": {
                  \"belongs_to_playlist\": \"$(echo $playlist | jq -r '.id')\"
                }
              }"
              video_response=$(curl -X POST -H "Authorization: Bearer $access_token" -H "Content-Type: application/json" -d "$video_entity" https://api.getport.io/v1/blueprints/video/entities?upsert=true)
              echo "Video sync status: $video_response"
            done

            next_page_token=$(echo $video_response | jq -r '.nextPageToken')
            if [ -z "$next_page_token" ]; then
              break
            fi
          done
