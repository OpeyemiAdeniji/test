name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq for JSON processing
        run: sudo apt-get install jq

      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)

          # Function to get Port access token
          get_port_access_token() {
            response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
              -H "Content-Type: application/json" \
              -d '{
                "clientId": "'"$PORT_CLIENT_ID"'",
                "clientSecret": "'"$PORT_CLIENT_SECRET"'"
              }')

            if echo "$response" | grep -q '"ok":false'; then
              echo "Error obtaining access token: $(echo "$response" | jq -r '.error')"
              return 1
            fi

            access_token=$(echo "$response" | jq -r '.accessToken // empty')
            if [ -z "$access_token" ]; then
              echo "Failed to retrieve access token. Response: $response"
              return 1
            fi

            echo "$access_token"
          }

          ACCESS_TOKEN=$(get_port_access_token)
          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to obtain access token. Exiting."
            exit 1
          fi

          if ! [[ "$ACCESS_TOKEN" =~ ^[a-zA-Z0-9_-]+\.[a-zA-Z0-9_-]+\.[a-zA-Z0-9_-]+$ ]]; then
            echo "Invalid JWT format detected. Please check the token generation."
            exit 1
          fi

  fetch_playlist_metadata:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      PLAYLIST_ID: ${{ steps.fetch_metadata.outputs.PLAYLIST_ID }}
      PLAYLIST_DATA: ${{ steps.fetch_metadata.outputs.PLAYLIST_DATA }}
    steps:
      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)

          # Function to get Port access token
          get_port_access_token() {
            response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
              -H "Content-Type: application/json" \
              -d '{
                "clientId": "'"$PORT_CLIENT_ID"'",
                "clientSecret": "'"$PORT_CLIENT_SECRET"'"
              }')

            access_token=$(echo "$response" | jq -r '.accessToken // empty')
            echo "$access_token"
          }

          ACCESS_TOKEN=$(get_port_access_token)
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Fetch YouTube Playlist Metadata
        id: fetch_metadata
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          playlist_id=$(echo $playlist_response | jq -r '.items[0].id')
          
          if [ -z "$playlist_id" ]; then
            echo "Failed to fetch playlist details. Exiting."
            exit 1
          fi

          playlist_data=$(echo $playlist_response | jq -c '.items[0] | {
            identifier: .id,
            title: .snippet.title,
            properties: {
              playlistId: .id,
              title: .snippet.title,
              description: .snippet.description,
              thumbnailUrl: .snippet.thumbnails.default.url,
              videoCount: .contentDetails.itemCount,
              created_at: .snippet.publishedAt
            }
          }')

          echo "PLAYLIST_ID=$playlist_id" >> $GITHUB_OUTPUT
          echo "PLAYLIST_DATA=$playlist_data" >> $GITHUB_OUTPUT

  push_playlist_to_port:
    runs-on: ubuntu-latest
    needs: fetch_playlist_metadata
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)
          
          ACCESS_TOKEN=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }' | jq -r '.accessToken')
          
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Push Playlist Data to Port
        run: |
          playlist_entity='${{ needs.fetch_playlist_metadata.outputs.PLAYLIST_DATA }}'
          
          response=$(curl -s -w "%{http_code}" -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$playlist_entity")
          
          if [[ "${response: -3}" != "200" && "${response: -3}" != "201" ]]; then
            echo "Failed to push playlist to Port. Response: $response"
            exit 1
          fi

  fetch_videos:
    runs-on: ubuntu-latest
    needs: [push_playlist_to_port, fetch_playlist_metadata]
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      VIDEOS_CHUNKS: ${{ steps.chunk_videos.outputs.CHUNKS }}
    steps:
      - name: Generate Access Token
        id: token
        run: |
          ACCESS_TOKEN=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }' | jq -r '.accessToken')
          
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Fetch and Process Videos
        id: process_videos
        run: |
          # Create a temporary file to store all video data
          video_data_file=$(mktemp)
          echo "[]" > "$video_data_file"
          
          next_page_token=""
          while true; do
            # Fetch playlist items
            playlist_items_url="https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}${next_page_token:+&pageToken=$next_page_token}"
            playlist_response=$(curl -s "$playlist_items_url")
            
            # Process each video in the current page
            echo "$playlist_response" | jq -r '.items[].snippet.resourceId.videoId' | while read -r video_id; do
              [ -z "$video_id" ] && continue
              
              # Fetch video details
              video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=${YOUTUBE_API_KEY}")
              
              # Create video entity and append to file
              video_json=$(echo $video_details | jq -c '.items[0] | {
                identifier: .id,
                title: .snippet.title,
                properties: {
                  videoId: .id,
                  title: .snippet.title,
                  description: .snippet.description,
                  thumbnailUrl: .snippet.thumbnails.default.url,
                  duration: .contentDetails.duration,
                  viewCount: (.statistics.viewCount // "0" | tonumber),
                  likeCount: (.statistics.likeCount // "0" | tonumber),
                  commentCount: (.statistics.commentCount // "0" | tonumber)
                },
                relations: {
                  belongs_to_playlist: "'"${{ needs.fetch_playlist_metadata.outputs.PLAYLIST_ID }}"'"
                }
              }')
              
              # Append to the array in the file
              content=$(cat "$video_data_file")
              echo "$content" | jq --arg video "$video_json" '. + [$video | fromjson]' > "$video_data_file"
            done
            
            # Check for next page
            next_page_token=$(echo $playlist_response | jq -r '.nextPageToken // empty')
            [ -z "$next_page_token" ] && break
          done
          
          # Save the complete video data file
          echo "VIDEO_DATA_FILE=$video_data_file" >> $GITHUB_ENV

      - name: Chunk Videos
        id: chunk_videos
        run: |
          # Read the complete video data and split into chunks of 10
          chunks=$(cat $VIDEO_DATA_FILE | jq -c '. | _nwise(10)')
          echo "CHUNKS=$chunks" >> $GITHUB_OUTPUT

  push_videos_to_port:
    runs-on: ubuntu-latest
    needs: fetch_videos
    strategy:
      matrix:
        chunk: ${{ fromJson(needs.fetch_videos.outputs.VIDEOS_CHUNKS) }}
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Generate Access Token
        run: |
          ACCESS_TOKEN=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }' | jq -r '.accessToken')
          
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Push Videos to Port
        run: |
          echo '${{ matrix.chunk }}' | jq -c '.[]' | while read -r video; do
            response=$(curl -s -w "%{http_code}" -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$video")
            
            if [[ "${response: -3}" != "200" && "${response: -3}" != "201" ]]; then
              echo "Failed to push video to Port. Response: $response"
              exit 1
            fi
            
            # Add small delay to prevent rate limiting
            sleep 1
          done
