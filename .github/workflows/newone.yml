name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  process_playlist:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    steps:
      - name: Install jq
        run: sudo apt-get install jq

      - name: Generate Port Access Token
        id: token
        run: |
          ACCESS_TOKEN=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }' | jq -r '.accessToken')
          
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Fetch Playlist Metadata
        id: fetch_playlist
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          playlist_id=$(echo $playlist_response | jq -r '.items[0].id')
          
          if [ -z "$playlist_id" ]; then
            echo "Failed to fetch playlist details. Exiting."
            exit 1
          fi

          playlist_data=$(echo $playlist_response | jq -c '.items[0] | {
            identifier: .id,
            title: .snippet.title,
            properties: {
              playlistId: .id,
              title: .snippet.title,
              description: .snippet.description,
              thumbnailUrl: .snippet.thumbnails.default.url,
              videoCount: .contentDetails.itemCount,
              created_at: .snippet.publishedAt
            }
          }')

          # Push playlist to Port
          curl -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$playlist_data"

          echo "PLAYLIST_ID=$playlist_id" >> $GITHUB_OUTPUT

      - name: Process Videos
        env:
          PLAYLIST_ID: ${{ steps.fetch_playlist.outputs.PLAYLIST_ID }}
        run: |
          next_page_token=""
          
          while true; do
            # Fetch playlist items
            playlist_items_url="https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}${next_page_token:+&pageToken=$next_page_token}"
            playlist_response=$(curl -s "$playlist_items_url")
            
            # Process each video in the current page
            echo "$playlist_response" | jq -r '.items[].snippet.resourceId.videoId' | while read -r video_id; do
              [ -z "$video_id" ] && continue
              
              # Fetch video details
              video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=${YOUTUBE_API_KEY}")
              
              # Create and push video entity directly
              video_json=$(echo $video_details | jq -c '.items[0] | {
                identifier: .id,
                title: .snippet.title,
                properties: {
                  videoId: .id,
                  title: .snippet.title,
                  description: .snippet.description,
                  thumbnailUrl: .snippet.thumbnails.default.url,
                  duration: .contentDetails.duration,
                  viewCount: (.statistics.viewCount // "0" | tonumber),
                  likeCount: (.statistics.likeCount // "0" | tonumber),
                  commentCount: (.statistics.commentCount // "0" | tonumber)
                },
                relations: {
                  belongs_to_playlist: "'"$PLAYLIST_ID"'"
                }
              }')
              
              # Push directly to Port
              curl -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$video_json"
              
              # Add small delay to prevent rate limiting
              sleep 1
            done
            
            # Check for next page
            next_page_token=$(echo $playlist_response | jq -r '.nextPageToken // empty')
            [ -z "$next_page_token" ] && break
          done
