name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  update_port:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install jq for JSON processing
        run: sudo apt-get install jq

      - name: Fetch and Process YouTube Data using Bash
        id: fetch_data
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ inputs.playlistid }}
          PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
        run: |
          set -x  # Enable command tracing for debugging

          # Function to get Port access token
          get_port_access_token() {
            response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
              -H "Content-Type: application/json" \
              -d '{
                "clientId": "'"$PORT_CLIENT_ID"'",
                "clientSecret": "'"$PORT_CLIENT_SECRET"'"
              }')
            echo "Token response: $response"  # Debug line to print full response
            echo $response | jq -r '.accessToken // empty'
          }

          # Get access token
          ACCESS_TOKEN=$(get_port_access_token)
          if [[ -z "$ACCESS_TOKEN" ]]; then
            echo "Failed to retrieve access token. Response: $response"
            exit 1
          fi
          echo "Access token obtained: ${ACCESS_TOKEN:0:5}***"

          # Fetch playlist details
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}")
          playlist_id=$(echo $playlist_response | jq -r '.items[0].id')
          playlist_title=$(echo $playlist_response | jq -r '.items[0].snippet.title')
          playlist_description=$(echo $playlist_response | jq -r '.items[0].snippet.description')
          playlist_thumbnail=$(echo $playlist_response | jq -r '.items[0].snippet.thumbnails.default.url')
          playlist_video_count=$(echo $playlist_response | jq -r '.items[0].contentDetails.itemCount')
          playlist_published_at=$(echo $playlist_response | jq -r '.items[0].snippet.publishedAt')

          # Create playlist entity payload
          playlist_entity=$(jq -n --arg id "$playlist_id" --arg title "$playlist_title" \
            --arg description "$playlist_description" --arg thumbnailUrl "$playlist_thumbnail" \
            --arg videoCount "$playlist_video_count" --arg created_at "$playlist_published_at" \
            '{
              identifier: $id,
              title: $title,
              properties: {
                playlistId: $id,
                title: $title,
                description: $description,
                thumbnailUrl: $thumbnailUrl,
                videoCount: ($videoCount | tonumber),
                created_at: $created_at
              }
            }')

          # Upload playlist to Port
          curl -s -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$playlist_entity"

          # Fetch and process videos in the playlist
          next_page_token=""
          while :; do
            url="https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${PLAYLIST_ID}&key=${YOUTUBE_API_KEY}${next_page_token:+&pageToken=$next_page_token}"
            response=$(curl -s "$url")
            next_page_token=$(echo $response | jq -r '.nextPageToken // empty')

            video_ids=$(echo $response | jq -r '.items[].snippet.resourceId.videoId')
            for video_id in $video_ids; do
              video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=${YOUTUBE_API_KEY}")
              video_title=$(echo $video_details | jq -r '.items[0].snippet.title')
              video_description=$(echo $video_details | jq -r '.items[0].snippet.description')
              video_thumbnail=$(echo $video_details | jq -r '.items[0].snippet.thumbnails.default.url')
              video_duration=$(echo $video_details | jq -r '.items[0].contentDetails.duration')
              video_view_count=$(echo $video_details | jq -r '.items[0].statistics.viewCount // 0')
              video_like_count=$(echo $video_details | jq -r '.items[0].statistics.likeCount // 0')
              video_comment_count=$(echo $video_details | jq -r '.items[0].statistics.commentCount // 0')

              # Create video entity payload
              video_entity=$(jq -n --arg id "$video_id" --arg title "$video_title" \
                --arg description "$video_description" --arg thumbnailUrl "$video_thumbnail" \
                --arg duration "$video_duration" --argjson viewCount "$video_view_count" \
                --argjson likeCount "$video_like_count" --argjson commentCount "$video_comment_count" \
                --arg playlistId "$playlist_id" \
                '{
                  identifier: $id,
                  title: $title,
                  properties: {
                    videoId: $id,
                    title: $title,
                    description: $description,
                    thumbnailUrl: $thumbnailUrl,
                    duration: $duration,
                    viewCount: $viewCount,
                    likeCount: $likeCount,
                    commentCount: $commentCount
                  },
                  relations: {
                    belongs_to_playlist: $playlistId
                  }
                }')

              # Upload video to Port
              curl -s -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$video_entity"
            done

            [[ -z "$next_page_token" ]] && break
          done
