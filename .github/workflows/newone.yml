name: Update Port with YouTube Playlist Data

on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  fetch_playlist_metadata:
    # Previous job remains unchanged
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      playlist_id: ${{ steps.fetch_metadata.outputs.PLAYLIST_ID }}
      playlist_data: ${{ steps.fetch_metadata.outputs.PLAYLIST_DATA }}
    steps:
      # ... (keep existing steps)

  push_playlist_to_port:
    # Previous job remains unchanged
    needs: fetch_playlist_metadata
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      # ... (keep existing steps)

  fetch_videos:
    # Previous job remains unchanged
    needs: push_playlist_to_port
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PLAYLIST_ID: ${{ inputs.playlistid }}
    outputs:
      videos_data: ${{ steps.collect_videos.outputs.videos_json }}
    steps:
      # ... (keep existing steps)

  push_videos_to_port:
    needs: [fetch_videos, fetch_playlist_metadata]
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
    steps:
      - name: Generate and Validate Access Token
        id: token
        run: |
          set -e
          PORT_CLIENT_ID=$(echo "$PORT_CLIENT_ID" | xargs)
          PORT_CLIENT_SECRET=$(echo "$PORT_CLIENT_SECRET" | xargs)
          
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "{\"clientId\": \"$PORT_CLIENT_ID\", \"clientSecret\": \"$PORT_CLIENT_SECRET\"}")
          ACCESS_TOKEN=$(echo "$response" | jq -r '.accessToken')
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
            
      - name: Send Start Logs to Port
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Starting video push to Port",
              "statusLabel": "Pushing Videos"
            }'
            
      - name: Push Videos to Port
        run: |
          # Process videos directly from the output variable instead of writing to a file
          echo '${{ needs.fetch_videos.outputs.videos_data }}' | jq -c '.[]' | while read -r video; do
            echo "Processing video..."
            
            # Validate video JSON structure
            if ! echo "$video" | jq -e '.identifier' > /dev/null; then
              echo "Error: Invalid video data structure"
              echo "$video" | jq '.'
              continue
            fi
            
            # Send to Port with proper error handling
            response=$(curl -s -w "\n%{http_code}" \
              -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$video")
            
            status_code=$(echo "$response" | tail -n1)
            response_body=$(echo "$response" | head -n -1)
            
            if [[ "$status_code" != "200" && "$status_code" != "201" ]]; then
              echo "Failed to push video. Status: $status_code"
              echo "Response: $response_body"
              echo "Video data: $video"
              exit 1
            fi
            
            video_id=$(echo "$video" | jq -r '.identifier')
            echo "Successfully pushed video: $video_id"
            
            # Rate limiting prevention
            sleep 0.5
          done
          
      - name: Send Completion Logs to Port
        if: success()
        run: |
          PORT_RUN_ID=$(echo '${{ inputs.port_context }}' | jq -r '.runId')
          curl -L "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{
              "message": "Successfully pushed all videos to Port",
              "statusLabel": "Videos Pushed"
            }'
