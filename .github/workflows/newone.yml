name: Update Port with YouTube Playlist Data

on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  initialize:
    runs-on: ubuntu-latest
    outputs:
      access_token: ${{ steps.get_token.outputs.token }}
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
    steps:
      - name: Report job start
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).runId }}
          logMessage: "üöÄ Starting YouTube playlist import workflow"
          status: RUNNING
          
      - name: Get Port access token
        id: get_token
        run: |
          json_payload="{\"clientId\":\"$PORT_CLIENT_ID\",\"clientSecret\":\"$PORT_CLIENT_SECRET\"}"
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d "$json_payload")
          
          access_token=$(echo "$response" | jq -r '.accessToken')
          echo "::add-mask::$access_token"
          echo "token=$access_token" >> $GITHUB_OUTPUT

  fetch_playlist:
    needs: initialize
    runs-on: ubuntu-latest
    outputs:
      playlist_data: ${{ steps.get_playlist.outputs.playlist_json }}
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
    steps:
      - name: Report playlist fetch start
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).runId }}
          logMessage: "üìã Fetching playlist information"
          status: RUNNING

      - name: Get playlist details
        id: get_playlist
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${{ inputs.playlistid }}&key=${YOUTUBE_API_KEY}")
          echo "playlist_json=$(echo $playlist_response | jq -c .)" >> $GITHUB_OUTPUT

      - name: Create playlist entity in Port
        run: |
          playlist_data=$(echo '${{ steps.get_playlist.outputs.playlist_json }}')
          
          playlist_entity=$(echo $playlist_data | jq -r '.items[0] | {
            identifier: .id,
            title: .snippet.title,
            properties: {
              playlistId: .id,
              title: .snippet.title,
              description: .snippet.description,
              thumbnailUrl: .snippet.thumbnails.default.url,
              videoCount: .contentDetails.itemCount,
              created_at: .snippet.publishedAt
            }
          }')

          curl -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: Bearer ${{ needs.initialize.outputs.access_token }}" \
            -H "Content-Type: application/json" \
            -d "$playlist_entity"

  process_videos:
    needs: [initialize, fetch_playlist]
    runs-on: ubuntu-latest
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
    steps:
      - name: Report video processing start
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).runId }}
          logMessage: "üé• Processing videos from playlist"
          status: RUNNING

      - name: Process videos
        run: |
          next_page_token=""
          processed_count=0
          
          while :; do
            url="https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${{ inputs.playlistid }}&key=${YOUTUBE_API_KEY}${next_page_token:+&pageToken=$next_page_token}"
            response=$(curl -s "$url")
            
            # Process each video
            echo "$response" | jq -r '.items[].snippet.resourceId.videoId' | while read -r video_id; do
              video_details=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=${YOUTUBE_API_KEY}")
              
              # Create video entity
              video_entity=$(echo $video_details | jq -r --arg playlist_id "${{ inputs.playlistid }}" '.items[0] | {
                identifier: .id,
                title: .snippet.title,
                properties: {
                  videoId: .id,
                  title: .snippet.title,
                  description: .snippet.description,
                  thumbnailUrl: .snippet.thumbnails.default.url,
                  duration: .contentDetails.duration,
                  viewCount: (.statistics.viewCount // "0" | tonumber),
                  likeCount: (.statistics.likeCount // "0" | tonumber),
                  commentCount: (.statistics.commentCount // "0" | tonumber)
                },
                relations: {
                  belongs_to_playlist: $playlist_id
                }
              }')

              curl -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
                -H "Authorization: Bearer ${{ needs.initialize.outputs.access_token }}" \
                -H "Content-Type: application/json" \
                -d "$video_entity"
              
              ((processed_count++))
              
              # Report progress every 10 videos
              if ((processed_count % 10 == 0)); then
                curl -X POST "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
                  -H "Authorization: Bearer ${{ needs.initialize.outputs.access_token }}" \
                  -H "Content-Type: application/json" \
                  -d "{\"message\": \"üìä Processed $processed_count videos\"}"
              fi
            done
            
            next_page_token=$(echo "$response" | jq -r '.nextPageToken // empty')
            [[ -z "$next_page_token" ]] && break
          done

  finalize:
    needs: [initialize, fetch_playlist, process_videos]
    runs-on: ubuntu-latest
    if: always()
    env:
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
    steps:
      - name: Report workflow completion
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).runId }}
          logMessage: ${{ job.status == 'success' && '‚úÖ Successfully imported YouTube playlist data' || '‚ùå Failed to import YouTube playlist data' }}
          status: ${{ job.status == 'success' && 'SUCCESS' || 'FAILURE' }}
