name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  update_port:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # Previous steps remain the same until the Upsert Video Data step

      - name: Create Python script for video upsertion
        run: |
          cat << 'EOF' > upsert_videos.py
          import os
          import json

          video_count = int(os.environ['VIDEO_COUNT'])
          
          for i in range(video_count):
              video_data = {
                  "identifier": os.environ[f'VIDEOID_{i}'],
                  "properties": {
                      "videoId": os.environ[f'VIDEOID_{i}'],
                      "title": os.environ[f'TITLE_{i}'],
                      "description": os.environ[f'DESCRIPTION_{i}'],
                      "thumbnailUrl": os.environ[f'THUMBNAILURL_{i}'],
                      "duration": os.environ[f'DURATION_{i}'],
                      "viewCount": int(os.environ[f'VIEWCOUNT_{i}']),
                      "likeCount": int(os.environ[f'LIKECOUNT_{i}']),
                      "commentCount": int(os.environ[f'COMMENTCOUNT_{i}'])
                  },
                  "relations": {
                      "belongs_to_playlist": os.environ['PLAYLIST_ID']
                  }
              }
              
              # Write each video's data to a separate file
              with open(f'video_data_{i}.json', 'w') as f:
                  json.dump(video_data, f)
          
          # Write the count to GITHUB_OUTPUT
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              print(f"video_count={video_count}", file=f)
          EOF

      - name: Prepare Video Data
        id: prepare_videos
        env:
          VIDEO_COUNT: ${{ steps.fetch_modify_data.outputs.video_count }}
          PLAYLIST_ID: ${{ steps.fetch_modify_data.outputs.playlist_playlistId }}
          # Dynamic environment variables will be available from fetch_youtube.py outputs
        run: python upsert_videos.py

      - name: Upsert Videos to Port
        run: |
          for i in $(seq 0 $((${{ steps.prepare_videos.outputs.video_count }} - 1))); do
            echo "Upserting video $i"
            curl -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ env.PORT_ACCESS_TOKEN }}" \
              --data-binary "@video_data_$i.json"
          done
        env:
          PORT_ACCESS_TOKEN: ${{ secrets.PORT_CLIENT_SECRET }}
