name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  update_port:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}

    steps:
      # ... (previous steps remain the same until fetch_youtube.py) ...

      - name: Modify fetch_youtube.py to output video count correctly
        run: |
          cat << 'EOF' > fetch_youtube.py
          import os
          import requests
          import json
          from datetime import datetime

          # ... (previous code remains the same until the end) ...

          # Fetch videos
          videos = fetch_playlist_videos(playlist_id)

          # Write video count first
          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              print(f"video_count={len(videos)}", file=fh)
              print(f"total_videos={len(videos)}", file=fh)  # Adding a backup count

          # Write video data to GITHUB_OUTPUT
          with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
              for i, video in enumerate(videos):
                  snippet = video['snippet']
                  statistics = video.get('statistics', {})
                  content_details = video.get('contentDetails', {})
                  
                  video_data = {
                      "videoId": video['id'],
                      "title": sanitize_value(snippet['title']),
                      "description": sanitize_value(snippet['description']),
                      "thumbnailUrl": snippet['thumbnails']['default']['url'],
                      "duration": content_details.get('duration', ''),
                      "viewCount": int(statistics.get('viewCount', 0)),
                      "likeCount": int(statistics.get('likeCount', 0)),
                      "commentCount": int(statistics.get('commentCount', 0))
                  }
                  
                  for key, value in video_data.items():
                      if isinstance(value, str):
                          print(f"{key}_{i}<<EOF", file=fh)
                          print(f"{value}", file=fh)
                          print("EOF", file=fh)
                      else:
                          print(f"{key}_{i}={value}", file=fh)
          EOF

      - name: Fetch and Modify YouTube Playlist Data
        id: fetch_modify_data
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ inputs.playlistid }}
        run: python fetch_youtube.py

      - name: Debug Output
        run: |
          echo "Video count: ${{ steps.fetch_modify_data.outputs.video_count }}"
          echo "Total videos: ${{ steps.fetch_modify_data.outputs.total_videos }}"

      - name: Create Python script for video upsertion
        run: |
          cat << 'EOF' > upsert_videos.py
          import os
          import json
          import sys

          try:
              video_count = int(os.environ.get('VIDEO_COUNT', '0'))
              print(f"Processing {video_count} videos")
              
              if video_count == 0:
                  print("No videos found to process")
                  sys.exit(0)
                  
              for i in range(video_count):
                  video_data = {
                      "identifier": os.environ[f'VIDEOID_{i}'],
                      "properties": {
                          "videoId": os.environ[f'VIDEOID_{i}'],
                          "title": os.environ[f'TITLE_{i}'],
                          "description": os.environ[f'DESCRIPTION_{i}'],
                          "thumbnailUrl": os.environ[f'THUMBNAILURL_{i}'],
                          "duration": os.environ[f'DURATION_{i}'],
                          "viewCount": int(os.environ[f'VIEWCOUNT_{i}']),
                          "likeCount": int(os.environ[f'LIKECOUNT_{i}']),
                          "commentCount": int(os.environ[f'COMMENTCOUNT_{i}'])
                      },
                      "relations": {
                          "belongs_to_playlist": os.environ['PLAYLIST_ID']
                      }
                  }
                  
                  # Write each video's data to a separate file
                  with open(f'video_data_{i}.json', 'w') as f:
                      json.dump(video_data, f)
              
              # Write the count to GITHUB_OUTPUT
              with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
                  print(f"video_count={video_count}", file=f)
                  
          except Exception as e:
              print(f"Error processing videos: {str(e)}")
              print("Environment variables:")
              for key, value in os.environ.items():
                  if key.startswith(('VIDEO', 'PLAYLIST')):
                      print(f"{key}: {value}")
              sys.exit(1)
          EOF

      - name: Prepare Video Data
        id: prepare_videos
        env:
          VIDEO_COUNT: ${{ steps.fetch_modify_data.outputs.video_count }}
          PLAYLIST_ID: ${{ steps.fetch_modify_data.outputs.playlist_playlistId }}
        run: python upsert_videos.py

      - name: Upsert Videos to Port
        if: steps.prepare_videos.outputs.video_count > 0
        run: |
          for i in $(seq 0 $((${{ steps.prepare_videos.outputs.video_count }} - 1))); do
            echo "Processing video $i"
            if [ -f "video_data_$i.json" ]; then
              echo "Upserting video $i"
              curl -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
                -H "Content-Type: application/json" \
                -H "Authorization: Bearer ${{ env.PORT_ACCESS_TOKEN }}" \
                --data-binary "@video_data_$i.json"
            else
              echo "Warning: video_data_$i.json not found"
            fi
          done
        env:
          PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
