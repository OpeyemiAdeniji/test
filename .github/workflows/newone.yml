name: Update Port with YouTube Playlist Data

on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  initialize:
    runs-on: ubuntu-latest
    outputs:
      access_token: ${{ steps.get_token.outputs.token }}
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
    
    steps:
      - name: Log initialization start
        run: |
          curl -X POST "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Content-Type: application/json" \
            -d '{"message": "Starting YouTube playlist ingestion"}' \
            -u "$PORT_CLIENT_ID:$PORT_CLIENT_SECRET"
      
      - name: Get Port access token
        id: get_token
        run: |
          response=$(curl -s -X POST "https://api.getport.io/v1/auth/access_token" \
            -H "Content-Type: application/json" \
            -d '{
              "clientId": "'"$PORT_CLIENT_ID"'",
              "clientSecret": "'"$PORT_CLIENT_SECRET"'"
            }')
          
          token=$(echo "$response" | jq -r '.accessToken')
          if [ -z "$token" ]; then
            echo "Failed to get access token"
            exit 1
          fi
          echo "token=$token" >> $GITHUB_OUTPUT

  process_playlist:
    needs: initialize
    runs-on: ubuntu-latest
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
    
    steps:
      - name: Log playlist processing start
        run: |
          curl -X POST "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Authorization: Bearer ${{ needs.initialize.outputs.access_token }}" \
            -H "Content-Type: application/json" \
            -d '{"message": "Fetching playlist details"}'

      - name: Fetch playlist details
        id: playlist_details
        run: |
          playlist_response=$(curl -s "https://www.googleapis.com/youtube/v3/playlists?part=snippet,contentDetails,status&id=${{ inputs.playlistid }}&key=${{ env.YOUTUBE_API_KEY }}")
          
          # Create and store playlist details
          echo "PLAYLIST_ID=$(echo $playlist_response | jq -r '.items[0].id')" >> $GITHUB_ENV
          echo "PLAYLIST_TITLE=$(echo $playlist_response | jq -r '.items[0].snippet.title')" >> $GITHUB_ENV
          echo "VIDEO_COUNT=$(echo $playlist_response | jq -r '.items[0].contentDetails.itemCount')" >> $GITHUB_ENV

      - name: Create playlist entity in Port
        run: |
          playlist_entity=$(jq -n \
            --arg id "$PLAYLIST_ID" \
            --arg title "$PLAYLIST_TITLE" \
            --arg count "$VIDEO_COUNT" \
            '{
              identifier: $id,
              title: $title,
              properties: {
                playlistId: $id,
                title: $title,
                videoCount: ($count | tonumber)
              }
            }')

          response=$(curl -s -X POST "https://api.getport.io/v1/blueprints/playlist/entities?upsert=true" \
            -H "Authorization: Bearer ${{ needs.initialize.outputs.access_token }}" \
            -H "Content-Type: application/json" \
            -d "$playlist_entity")

      - name: Log playlist creation
        run: |
          curl -X POST "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Authorization: Bearer ${{ needs.initialize.outputs.access_token }}" \
            -H "Content-Type: application/json" \
            -d "{\"message\": \"Created playlist entity: $PLAYLIST_TITLE\"}"

  process_videos:
    needs: [initialize, process_playlist]
    runs-on: ubuntu-latest
    env:
      YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}
      ACCESS_TOKEN: ${{ needs.initialize.outputs.access_token }}
    
    steps:
      - name: Log video processing start
        run: |
          curl -X POST "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{"message": "Starting video processing"}'

      - name: Get playlist items
        id: playlist_items
        run: |
          next_page_token=""
          echo "VIDEO_IDS=" >> $GITHUB_ENV
          
          while :; do
            url="https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&maxResults=50&playlistId=${{ inputs.playlistid }}&key=${{ env.YOUTUBE_API_KEY }}${next_page_token:+&pageToken=$next_page_token}"
            response=$(curl -s "$url")
            
            # Collect video IDs
            video_ids=$(echo "$response" | jq -r '.items[].snippet.resourceId.videoId' | tr '\n' ',')
            echo "VIDEO_IDS=${VIDEO_IDS}${video_ids}" >> $GITHUB_ENV
            
            next_page_token=$(echo "$response" | jq -r '.nextPageToken // empty')
            [ -z "$next_page_token" ] && break
          done

      - name: Process videos
        run: |
          # Remove trailing comma and split into array
          IFS=',' read -ra video_array <<< "${VIDEO_IDS%,}"
          total_videos=${#video_array[@]}
          processed_count=0
          
          for video_id in "${video_array[@]}"; do
            # Log video processing start
            curl -X POST "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"message\": \"Processing video $((processed_count + 1)) of $total_videos\"}"
            
            # Fetch video details
            video_response=$(curl -s "https://www.googleapis.com/youtube/v3/videos?part=snippet,contentDetails,statistics&id=$video_id&key=${{ env.YOUTUBE_API_KEY }}")
            
            # Create video entity
            video_entity=$(echo "$video_response" | jq -r --arg playlist_id "${{ inputs.playlistid }}" '.items[0] | {
              identifier: .id,
              title: .snippet.title,
              properties: {
                  videoId: .id,
                  title: .snippet.title,
                  duration: .contentDetails.duration,
                  viewCount: (.statistics.viewCount | tonumber),
                  likeCount: (.statistics.likeCount | tonumber)
                },
                relations: {
                  belongs_to_playlist: $playlist_id
                }
            }')

            # Create video in Port
            response=$(curl -s -X POST "https://api.getport.io/v1/blueprints/video/entities?upsert=true" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$video_entity")
            
            # Log video creation
            curl -X POST "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"message\": \"Created video entity: $(echo "$video_response" | jq -r '.items[0].snippet.title')\"}"
            
            ((processed_count++))
          done
          
          # Final progress report
          curl -X POST "https://api.getport.io/v1/actions/runs/$PORT_RUN_ID/logs" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"message\": \"Completed processing $processed_count videos\"}"

  finalize:
    needs: [process_playlist, process_videos]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Report final status
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).runId }}
          logMessage: "YouTube playlist ingestion complete"
          status: ${{ needs.process_playlist.result == 'success' && needs.process_videos.result == 'success' && 'SUCCESS' || 'FAILURE' }}
          baseUrl: https://api.getport.io
