name: Update Port with YouTube Playlist Data
on:
  workflow_dispatch:
    inputs:
      playlistid:
        description: 'ID of the YouTube playlist'
        required: true
      port_context:
        description: 'Port context payload'
        required: true

jobs:
  update_port:
    runs-on: ubuntu-latest
    env:
      PORT_CLIENT_ID: ${{ secrets.PORT_CLIENT_ID }}
      PORT_CLIENT_SECRET: ${{ secrets.PORT_CLIENT_SECRET }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PORT_RUN_ID: ${{ fromJson(inputs.port_context).runId }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Create Python script
        run: |
          cat << 'EOF' > fetch_youtube.py
          # [Previous Python script content remains the same until the end of video data writing]
          EOF

      - name: Fetch and Modify YouTube Playlist Data
        id: fetch_modify_data
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          PLAYLIST_ID: ${{ inputs.playlistid }}
        run: python fetch_youtube.py

      - name: Create Playlist in Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          identifier: ${{ steps.fetch_modify_data.outputs.playlist_playlistId }}
          blueprint: playlist
          properties: |-
            {
              "playlistId": "${{ steps.fetch_modify_data.outputs.playlist_playlistId }}",
              "title": "${{ steps.fetch_modify_data.outputs.playlist_title }}",
              "description": "${{ steps.fetch_modify_data.outputs.playlist_description }}",
              "thumbnailUrl": "${{ steps.fetch_modify_data.outputs.playlist_thumbnailUrl }}",
              "videoCount": ${{ steps.fetch_modify_data.outputs.playlist_videoCount }},
              "created_at": "${{ steps.fetch_modify_data.outputs.playlist_created_at }}"
            }

      - name: Create Video Upload Script
        if: steps.fetch_modify_data.outputs.video_count > 0
        run: |
          cat << 'EOF' > upload_videos.sh
          #!/bin/bash
          
          video_count="${{ steps.fetch_modify_data.outputs.video_count }}"
          
          for i in $(seq 0 $(($video_count - 1))); do
            echo "Processing video $i"
            
            # Construct the JSON for port-github-action
            json_properties=$(cat << END
            {
              "videoId": "${{ steps.fetch_modify_data.outputs.videoId_${i} }}",
              "title": "${{ steps.fetch_modify_data.outputs.title_${i} }}",
              "description": "${{ steps.fetch_modify_data.outputs.description_${i} }}",
              "thumbnailUrl": "${{ steps.fetch_modify_data.outputs.thumbnailUrl_${i} }}",
              "duration": "${{ steps.fetch_modify_data.outputs.duration_${i} }}",
              "viewCount": ${{ steps.fetch_modify_data.outputs.viewCount_${i} }},
              "likeCount": ${{ steps.fetch_modify_data.outputs.likeCount_${i} }},
              "commentCount": ${{ steps.fetch_modify_data.outputs.commentCount_${i} }}
            }
          END
            )
            
            # Execute port-github-action for each video
            port-github-action \
              --client-id "${{ secrets.PORT_CLIENT_ID }}" \
              --client-secret "${{ secrets.PORT_CLIENT_SECRET }}" \
              --base-url "https://api.getport.io" \
              --operation "UPSERT" \
              --identifier "${{ steps.fetch_modify_data.outputs.videoId_${i} }}" \
              --blueprint "video" \
              --properties "$json_properties" \
              --relations "{\"belongs_to_playlist\": \"${{ steps.fetch_modify_data.outputs.playlist_playlistId }}\"}"
          done
          EOF
          
          chmod +x upload_videos.sh

      - name: Upload Videos to Port
        if: steps.fetch_modify_data.outputs.video_count > 0
        run: ./upload_videos.sh
